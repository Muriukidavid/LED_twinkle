Debug info from  (Device - PE_Types)  (Module - PE_Types)


{{DEVELOPMENT}} --------(((DEBUGINFO)))--------{{DEVELOPMENT}} 

 DRIVER SYMBOLS (alphabet order)
-------------------------------
Abstract=Common\PE_TypesAbstract.inc
Doc_Misra_Rule_1=1.1
Doc_Misra_Rule_10=8.10
Doc_Misra_Rule_10_Description=All declarations and definitions of objects or function at file scope shall have internal linkage unless external linkage is required.
Doc_Misra_Rule_10_Lint=Info 765: external 'function' could be made static [MISRA 2004 Rule 8.10]
Doc_Misra_Rule_10_Reason=Device Initialization - ISR declaration is subject of various modifications by the user and may or may not be copied to another module - static is not used.
Doc_Misra_Rule_10_Type=Required
Doc_Misra_Rule_11=10.1
Doc_Misra_Rule_11_Description=The value of an expression of integer type shall not be implicitly converted to a different underlying type.
Doc_Misra_Rule_11_Lint=Note 960: Violates MISRA 2004 Required Rule 10.1, Implicit conversion of integer to smaller type
Doc_Misra_Rule_11_Reason=
Doc_Misra_Rule_11_Type=Required
Doc_Misra_Rule_12=11.3
Doc_Misra_Rule_12_Description=A cast should not be performed between a pointer type and an integral type.
Doc_Misra_Rule_12_Lint=Note 923: cast from 'integer type' to pointer [Encompasses MISRA 2004 Rules 11.1 and 11.3], [MISRA 2004 Rule 11.3]
Doc_Misra_Rule_12_Reason=IO map is based on structures and typecasting from a peripheral base address (integer constant) to a pointer type is used to get a pointer to the given peripheral structure used to access a peripheral registers.
Doc_Misra_Rule_12_Type=Advisory
Doc_Misra_Rule_13=11.4
Doc_Misra_Rule_13_Description=A cast should be not be performed between a pointer to object type and different pointer to object type
Doc_Misra_Rule_13_Lint=Note 929: cast from pointer to pointer [MISRA 2004 Rule 11.4]
Doc_Misra_Rule_13_Reason=See detailed description for particular component
Doc_Misra_Rule_13_Type=Advisory
Doc_Misra_Rule_14=12.1
Doc_Misra_Rule_14_Description=Limited dependence should be placed on C's operator precedence rules in expressions.
Doc_Misra_Rule_14_Lint=Note 961: Violates MISRA 2004 Advisory Rule 12.1, dependence placed on C's operator precedence; operators: ',' and ','
Doc_Misra_Rule_14_Reason=
Doc_Misra_Rule_14_Type=Advisory
Doc_Misra_Rule_15=12.8
Doc_Misra_Rule_15_Description=The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand.
Doc_Misra_Rule_15_Lint=Warning 572: Excessive shift value (precision 2 shifted right by 8) [MISRA 2004 Rule 12.8]
Doc_Misra_Rule_15_Reason=
Doc_Misra_Rule_15_Type=Required
Doc_Misra_Rule_16=12.10
Doc_Misra_Rule_16_Description=The comma operator shall not be used.
Doc_Misra_Rule_16_Lint=Note 960: Violates MISRA 2004 Required Rule 12.10, comma operator used
Doc_Misra_Rule_16_Reason=Comma operator is used in PDD macros.
Doc_Misra_Rule_16_Type=Required
Doc_Misra_Rule_17=12.11
Doc_Misra_Rule_17_Description=Evaluation of constant unsigned integer expressions should not lead to wrap-around.
Doc_Misra_Rule_17_Lint=Warning 648: Overflow in computing constant for operation: 'unsigned shift left' [MISRA 2004 Rule 12.11]
Doc_Misra_Rule_17_Reason=
Doc_Misra_Rule_17_Type=Advisory
Doc_Misra_Rule_18=13.7
Doc_Misra_Rule_18_Description=Boolean operations whose results are invariant shall not be permitted.
Doc_Misra_Rule_18_Lint=Warning 506: Constant value Boolean [MISRA 2004 Rules 13.7 and 14.1]
Doc_Misra_Rule_18_Reason=PDD macros define constants that can be passed as parameters to these macros.
Doc_Misra_Rule_18_Type=Required
Doc_Misra_Rule_19=14.2
Doc_Misra_Rule_19_Description=All non-null statements shall either: <br/>a) have at least one side effect however executed, <br/>or b) cause control flow to change.
Doc_Misra_Rule_19_Lint=Warning 522: Highest operation, operator ',', lacks side-effects
Doc_Misra_Rule_19_Reason=Some PDD macros have two commas in the macro implementation.
Doc_Misra_Rule_19_Type=Required
Doc_Misra_Rule_1_Description=All code shall conform to ISO 9899-1990 (C-code guideline)
Doc_Misra_Rule_1_Lint=Note 950: Non-ANSI reserved word or construct [MISRA 2004 Rules 1.1 and 2.2]
Doc_Misra_Rule_1_Reason=Non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt, CONVERT_TO_PAGED (RS08 only).
Doc_Misra_Rule_1_Type=Required
Doc_Misra_Rule_2=1.4
Doc_Misra_Rule_20=14.7
Doc_Misra_Rule_20_Description=A function shall have a single point of exit at the end of the function.
Doc_Misra_Rule_20_Lint=Note 904: Return statement before end of function [MISRA 2004 Rule 14.7]
Doc_Misra_Rule_20_Reason=Use of multiple return statements simplifies the code logic.
Doc_Misra_Rule_20_Type=Required
Doc_Misra_Rule_21=18.4
Doc_Misra_Rule_21_Description=Unions shall not be used.
Doc_Misra_Rule_21_Lint=Note 960: Violates MISRA 2004 Required Rule 18.4, unions shall not be used
Doc_Misra_Rule_21_Reason=Unions are used to efficiently swap bytes in a 16-bit word or 32-bit long word, to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.
Doc_Misra_Rule_21_Type=Required
Doc_Misra_Rule_22=19.13
Doc_Misra_Rule_22_Description=The # and ## preprocessor operators should not be used.
Doc_Misra_Rule_22_Lint=Note 961: Violates MISRA 2004 Advisory Rule 19.13, '#/##' operator used
Doc_Misra_Rule_22_Reason=Preprocessor operators are used to convert bit name to bit mask in macros for accessing peripheral registers.
Doc_Misra_Rule_22_Type=Advisory
Doc_Misra_Rule_2_Description=The compiler/linker shall be checked to ensure that 31 character significance and case sensitivity are supported for external identifiers.
Doc_Misra_Rule_2_Lint=Note Warning 621: Identifier clash [MISRA 2004 Rules 1.2, 1.4 and 5.1]
Doc_Misra_Rule_2_Reason=IO map defines register access constants. The constants' names contain peripheral name, register name, bit name and suffix _MASK/_SHIFT.
Doc_Misra_Rule_2_Type=Required
Doc_Misra_Rule_3=2.1
Doc_Misra_Rule_3_Description=Assembly language shall be encapsulated and isolated.
Doc_Misra_Rule_3_Lint=Note 950: Non-ANSI reserved word or construct [MISRA 2004 Rules 1.1 and 2.2]
Doc_Misra_Rule_3_Reason=Non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt, CONVERT_TO_PAGED (RS08 only).
Doc_Misra_Rule_3_Type=Required
Doc_Misra_Rule_4=3.1
Doc_Misra_Rule_4_Description=All usage of implementation-defined behavior shall be documented.
Doc_Misra_Rule_4_Lint=MISRA Compliancy Review (part of formal technical review)
Doc_Misra_Rule_4_Reason=Follows the list of implementation dependent behavior used in Processor Expert. See documentation of CodeWarrior MCU Build tools for more information on topics not specified below:
Doc_Misra_Rule_4_Type=Required
Doc_Misra_Rule_5=3.2
Doc_Misra_Rule_5_Description=The character set and the corresponding encoding shall be documented.
Doc_Misra_Rule_5_Lint=MISRA Compliancy Review (part of formal technical review)
Doc_Misra_Rule_5_Reason=Basic character set (see ISO 9899) is used in execution character set. Execution character set uses ASCII encoding (possible codes 0-255). Exception to basic character set: Term component uses NULL(0x00), CR (0x0D), LF(0x0A).
Doc_Misra_Rule_5_Type=Required
Doc_Misra_Rule_6=3.3
Doc_Misra_Rule_6_Description=The implementation of integer division in the chosen compiler should be determined, documented and taken into account.
Doc_Misra_Rule_6_Lint=MISRA Compliancy Review (part of formal technical review)
Doc_Misra_Rule_6_Reason=The way a Compiler implements division and modulo for negative operands is determined by the hardware implementation of the target's division instructions. See documentation of CodeWarrior S12(X) Build tools for more information.
Doc_Misra_Rule_6_Type=Advisory
Doc_Misra_Rule_7=3.4
Doc_Misra_Rule_7_Description=All uses of the #pragma directives shall be documented and explained.
Doc_Misra_Rule_7_Lint=MISRA Compliancy Review (part of formal technical review)
Doc_Misra_Rule_7_Reason=Some components use pragma directive to determine the memory segment, where code and/or data will be used (see below). All other uses of #pragma directives are commented in the generated source code.
Doc_Misra_Rule_7_Type=Required
Doc_Misra_Rule_8=3.6
Doc_Misra_Rule_8_Description=All libraries used in production code shall be written to comply with the provision of this document and shall have been subject to appropriate validation.
Doc_Misra_Rule_8_Lint=MISRA Compliancy Review (part of formal technical review)
Doc_Misra_Rule_8_Reason=Only libraries included in CodeWarrior development studio are used in the generated source code.
Doc_Misra_Rule_8_Type=Required
Doc_Misra_Rule_9=6.3
Doc_Misra_Rule_9_Description=Typedef that indicates size and signedness should be used in place of basic types.
Doc_Misra_Rule_9_Lint=Info 970: Use of modifier or type 'int' outside of a typedef [MISRA Rule 6.3]
Doc_Misra_Rule_9_Reason=The type of the function is defined by tool set. ProcessorExpert definition must comply..
Doc_Misra_Rule_9_Type=Advisory
DriverAuthor=Marek Vinkler
DriverDate=29.08.2006
DriverVersion=01.01
EndOfInterface=
Settings=Common\PE_TypesSettings.inc
halIntName=LDD_ivIndex_INT_PORTB
ivINT_ADC0=defaultInt
ivINT_ADC0_No=31
ivINT_ADC0_UserCount=0
ivINT_CMP0=defaultInt
ivINT_CMP0_No=32
ivINT_CMP0_UserCount=0
ivINT_DAC0=defaultInt
ivINT_DAC0_No=41
ivINT_DAC0_UserCount=0
ivINT_DMA0=defaultInt
ivINT_DMA0_No=16
ivINT_DMA0_UserCount=0
ivINT_DMA1=defaultInt
ivINT_DMA1_No=17
ivINT_DMA1_UserCount=0
ivINT_DMA2=defaultInt
ivINT_DMA2_No=18
ivINT_DMA2_UserCount=0
ivINT_DMA3=defaultInt
ivINT_DMA3_No=19
ivINT_DMA3_UserCount=0
ivINT_FTFA=defaultInt
ivINT_FTFA_No=21
ivINT_FTFA_UserCount=0
ivINT_Hard_Fault=defaultInt
ivINT_Hard_Fault_No=3
ivINT_Hard_Fault_UserCount=0
ivINT_I2C0=defaultInt
ivINT_I2C0_No=24
ivINT_I2C0_UserCount=0
ivINT_Initial_Program_Counter=defaultInt
ivINT_Initial_Program_Counter_No=1
ivINT_Initial_Program_Counter_RESET=
ivINT_Initial_Program_Counter_UserCount=0
ivINT_Initial_Stack_Pointer=defaultInt
ivINT_Initial_Stack_Pointer_No=0
ivINT_Initial_Stack_Pointer_RESET=
ivINT_Initial_Stack_Pointer_UserCount=0
ivINT_LLW=defaultInt
ivINT_LLW_No=23
ivINT_LLW_UserCount=0
ivINT_LPTimer=defaultInt
ivINT_LPTimer_No=44
ivINT_LPTimer_UserCount=1
ivINT_LVD_LVW=defaultInt
ivINT_LVD_LVW_No=22
ivINT_LVD_LVW_UserCount=1
ivINT_MCG=defaultInt
ivINT_MCG_No=43
ivINT_MCG_UserCount=0
ivINT_NMI=defaultInt
ivINT_NMI_No=2
ivINT_NMI_UserCount=0
ivINT_PIT=defaultInt
ivINT_PIT_No=38
ivINT_PIT_UserCount=0
ivINT_PORTA=defaultInt
ivINT_PORTA_No=46
ivINT_PORTA_UserCount=0
ivINT_PORTB=defaultInt
ivINT_PORTB_No=47
ivINT_PORTB_UserCount=0
ivINT_PendableSrvReq=defaultInt
ivINT_PendableSrvReq_No=14
ivINT_PendableSrvReq_UserCount=0
ivINT_RTC=defaultInt
ivINT_RTC_No=36
ivINT_RTC_Seconds=defaultInt
ivINT_RTC_Seconds_No=37
ivINT_RTC_Seconds_UserCount=0
ivINT_RTC_UserCount=0
ivINT_Reserved10=defaultInt
ivINT_Reserved10_No=10
ivINT_Reserved10_UserCount=0
ivINT_Reserved12=defaultInt
ivINT_Reserved12_No=12
ivINT_Reserved12_UserCount=0
ivINT_Reserved13=defaultInt
ivINT_Reserved13_No=13
ivINT_Reserved13_UserCount=0
ivINT_Reserved20=defaultInt
ivINT_Reserved20_No=20
ivINT_Reserved20_UserCount=0
ivINT_Reserved25=defaultInt
ivINT_Reserved25_No=25
ivINT_Reserved25_UserCount=0
ivINT_Reserved27=defaultInt
ivINT_Reserved27_No=27
ivINT_Reserved27_UserCount=0
ivINT_Reserved29=defaultInt
ivINT_Reserved29_No=29
ivINT_Reserved29_UserCount=0
ivINT_Reserved30=defaultInt
ivINT_Reserved30_No=30
ivINT_Reserved30_UserCount=0
ivINT_Reserved35=defaultInt
ivINT_Reserved35_No=35
ivINT_Reserved35_UserCount=0
ivINT_Reserved39=defaultInt
ivINT_Reserved39_No=39
ivINT_Reserved39_UserCount=0
ivINT_Reserved4=defaultInt
ivINT_Reserved40=defaultInt
ivINT_Reserved40_No=40
ivINT_Reserved40_UserCount=0
ivINT_Reserved45=defaultInt
ivINT_Reserved45_No=45
ivINT_Reserved45_UserCount=0
ivINT_Reserved4_No=4
ivINT_Reserved4_UserCount=0
ivINT_Reserved5=defaultInt
ivINT_Reserved5_No=5
ivINT_Reserved5_UserCount=0
ivINT_Reserved6=defaultInt
ivINT_Reserved6_No=6
ivINT_Reserved6_UserCount=0
ivINT_Reserved7=defaultInt
ivINT_Reserved7_No=7
ivINT_Reserved7_UserCount=0
ivINT_Reserved8=defaultInt
ivINT_Reserved8_No=8
ivINT_Reserved8_UserCount=0
ivINT_Reserved9=defaultInt
ivINT_Reserved9_No=9
ivINT_Reserved9_UserCount=0
ivINT_SPI0=defaultInt
ivINT_SPI0_No=26
ivINT_SPI0_UserCount=0
ivINT_SVCall=defaultInt
ivINT_SVCall_No=11
ivINT_SVCall_UserCount=0
ivINT_SysTick=defaultInt
ivINT_SysTick_No=15
ivINT_SysTick_UserCount=1
ivINT_TPM0=defaultInt
ivINT_TPM0_No=33
ivINT_TPM0_UserCount=0
ivINT_TPM1=defaultInt
ivINT_TPM1_No=34
ivINT_TPM1_UserCount=0
ivINT_TSI0=defaultInt
ivINT_TSI0_No=42
ivINT_TSI0_UserCount=0
ivINT_UART0=defaultInt
ivINT_UART0_No=28
ivINT_UART0_UserCount=0
Doc_Misra_Rule_10_Location=[Cpu|Vectors.c|Cpu|Vectors.c|Cpu|Vectors.c|Cpu|Vectors.c|Cpu|Vectors.c|Cpu|Vectors.c|Cpu|Vectors.c]
Doc_Misra_Rule_11_Location=[PE_Types.h|SDHC_LDD|PE_Types.h|SDHC_LDD|PE_Types.h|SDHC_LDD|PE_Types.h|SDHC_LDD|PE_Types.h|SDHC_LDD|PE_Types.h|SDHC_LDD|PE_Types.h|SDHC_LDD]
Doc_Misra_Rule_11_Location_Reason=[Call of the library function __set_FAULTMASK(). The code violates this rule for IAR compiler only.|Cannot shift by a value resulting from a complex expression.|Call of the library function __set_FAULTMASK(). The code violates this rule for IAR compiler only.|Cannot shift by a value resulting from a complex expression.|Call of the library function __set_FAULTMASK(). The code violates this rule for IAR compiler only.|Cannot shift by a value resulting from a complex expression.|Call of the library function __set_FAULTMASK(). The code violates this rule for IAR compiler only.|Cannot shift by a value resulting from a complex expression.|Call of the library function __set_FAULTMASK(). The code violates this rule for IAR compiler only.|Cannot shift by a value resulting from a complex expression.|Call of the library function __set_FAULTMASK(). The code violates this rule for IAR compiler only.|Cannot shift by a value resulting from a complex expression.|Call of the library function __set_FAULTMASK(). The code violates this rule for IAR compiler only.|Cannot shift by a value resulting from a complex expression.]
Doc_Misra_Rule_12_Location=[IO_Map.h|IO_Map.h|IO_Map.h|IO_Map.h|IO_Map.h|IO_Map.h|IO_Map.h]
Doc_Misra_Rule_13_Location=[Vectors.c|Serial_LDD|SPIMaster_LDD|SPISlave_LDD|SSI_LDD|USB_LDD|Vectors.c|Serial_LDD|SPIMaster_LDD|SPISlave_LDD|SSI_LDD|USB_LDD|Vectors.c|Serial_LDD|SPIMaster_LDD|SPISlave_LDD|SSI_LDD|USB_LDD|Vectors.c|Serial_LDD|SPIMaster_LDD|SPISlave_LDD|SSI_LDD|USB_LDD|Vectors.c|Serial_LDD|SPIMaster_LDD|SPISlave_LDD|SSI_LDD|USB_LDD|Vectors.c|Serial_LDD|SPIMaster_LDD|SPISlave_LDD|SSI_LDD|USB_LDD|Vectors.c|Serial_LDD|SPIMaster_LDD|SPISlave_LDD|SSI_LDD|USB_LDD]
Doc_Misra_Rule_13_Location_Reason=[Need to explicitly cast pointers to the general ISR for Interrupt vector table|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointers is used in StartTransaction, HostQueueTransfer and Init methods.|Need to explicitly cast pointers to the general ISR for Interrupt vector table|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointers is used in StartTransaction, HostQueueTransfer and Init methods.|Need to explicitly cast pointers to the general ISR for Interrupt vector table|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointers is used in StartTransaction, HostQueueTransfer and Init methods.|Need to explicitly cast pointers to the general ISR for Interrupt vector table|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointers is used in StartTransaction, HostQueueTransfer and Init methods.|Need to explicitly cast pointers to the general ISR for Interrupt vector table|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointers is used in StartTransaction, HostQueueTransfer and Init methods.|Need to explicitly cast pointers to the general ISR for Interrupt vector table|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointers is used in StartTransaction, HostQueueTransfer and Init methods.|Need to explicitly cast pointers to the general ISR for Interrupt vector table|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointers is used in StartTransaction, HostQueueTransfer and Init methods.]
Doc_Misra_Rule_14_Location=[SDHC_LDD|Ethernet_LDD|SDHC_LDD|Ethernet_LDD|SDHC_LDD|Ethernet_LDD|SDHC_LDD|Ethernet_LDD|SDHC_LDD|Ethernet_LDD|SDHC_LDD|Ethernet_LDD|SDHC_LDD|Ethernet_LDD]
Doc_Misra_Rule_14_Location_Reason=[Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.]
Doc_Misra_Rule_15_Location=[Ethernet_LDD|TimerUnit_LDD|Serial_LDD|Ethernet_LDD|TimerUnit_LDD|Serial_LDD|Ethernet_LDD|TimerUnit_LDD|Serial_LDD|Ethernet_LDD|TimerUnit_LDD|Serial_LDD|Ethernet_LDD|TimerUnit_LDD|Serial_LDD|Ethernet_LDD|TimerUnit_LDD|Serial_LDD|Ethernet_LDD|TimerUnit_LDD|Serial_LDD]
Doc_Misra_Rule_15_Location_Reason=[Macro for endianness conversion cannot be used on constants.|One of predefined constants for macro LPTMR_PDD_SetDivider has value 1.|PDD macros use shift operations that can cause MISRA violations when a constant with value less than 256 is passed as an argument.|Macro for endianness conversion cannot be used on constants.|One of predefined constants for macro LPTMR_PDD_SetDivider has value 1.|PDD macros use shift operations that can cause MISRA violations when a constant with value less than 256 is passed as an argument.|Macro for endianness conversion cannot be used on constants.|One of predefined constants for macro LPTMR_PDD_SetDivider has value 1.|PDD macros use shift operations that can cause MISRA violations when a constant with value less than 256 is passed as an argument.|Macro for endianness conversion cannot be used on constants.|One of predefined constants for macro LPTMR_PDD_SetDivider has value 1.|PDD macros use shift operations that can cause MISRA violations when a constant with value less than 256 is passed as an argument.|Macro for endianness conversion cannot be used on constants.|One of predefined constants for macro LPTMR_PDD_SetDivider has value 1.|PDD macros use shift operations that can cause MISRA violations when a constant with value less than 256 is passed as an argument.|Macro for endianness conversion cannot be used on constants.|One of predefined constants for macro LPTMR_PDD_SetDivider has value 1.|PDD macros use shift operations that can cause MISRA violations when a constant with value less than 256 is passed as an argument.|Macro for endianness conversion cannot be used on constants.|One of predefined constants for macro LPTMR_PDD_SetDivider has value 1.|PDD macros use shift operations that can cause MISRA violations when a constant with value less than 256 is passed as an argument.]
Doc_Misra_Rule_16_Location=[Global|Global|Global|Global|Global|Global|Global]
Doc_Misra_Rule_17_Location=[Ethernet_LDD|Ethernet_LDD|Ethernet_LDD|Ethernet_LDD|Ethernet_LDD|Ethernet_LDD|Ethernet_LDD]
Doc_Misra_Rule_17_Location_Reason=[Macro for endianness conversion cannot be used on constants.|Macro for endianness conversion cannot be used on constants.|Macro for endianness conversion cannot be used on constants.|Macro for endianness conversion cannot be used on constants.|Macro for endianness conversion cannot be used on constants.|Macro for endianness conversion cannot be used on constants.|Macro for endianness conversion cannot be used on constants.]
Doc_Misra_Rule_18_Location=[Global|Global|Global|Global|Global|Global|Global]
Doc_Misra_Rule_19_Location=[Global|Global|Global|Global|Global|Global|Global]
Doc_Misra_Rule_1_Location=[PE_Types.h|Cpu|Vectors.c|FLASH_LDD|PE_Types.h|Cpu|Vectors.c|FLASH_LDD|PE_Types.h|Cpu|Vectors.c|FLASH_LDD|PE_Types.h|Cpu|Vectors.c|FLASH_LDD|PE_Types.h|Cpu|Vectors.c|FLASH_LDD|PE_Types.h|Cpu|Vectors.c|FLASH_LDD|PE_Types.h|Cpu|Vectors.c|FLASH_LDD]
Doc_Misra_Rule_1_Location_Reason=[The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.]
Doc_Misra_Rule_20_Location=[Global|Global|Global|Global|Global|Global|Global]
Doc_Misra_Rule_21_Location=[Global|IO_Map.h|Global|IO_Map.h|Global|IO_Map.h|Global|IO_Map.h|Global|IO_Map.h|Global|IO_Map.h|Global|IO_Map.h]
Doc_Misra_Rule_21_Location_Reason=[Unions are used to efficiently swap bytes in a 16-bit word or 32-bit long word, to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to efficiently swap bytes in a 16-bit word or 32-bit long word, to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to efficiently swap bytes in a 16-bit word or 32-bit long word, to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to efficiently swap bytes in a 16-bit word or 32-bit long word, to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to efficiently swap bytes in a 16-bit word or 32-bit long word, to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to efficiently swap bytes in a 16-bit word or 32-bit long word, to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to efficiently swap bytes in a 16-bit word or 32-bit long word, to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.]
Doc_Misra_Rule_22_Location=[PE_Types.h|PE_Types.h|PE_Types.h|PE_Types.h|PE_Types.h|PE_Types.h|PE_Types.h]
Doc_Misra_Rule_22_Location_Reason=[Used to convert bit name to bit mask in macros accessing registers.|Used to convert bit name to bit mask in macros accessing registers.|Used to convert bit name to bit mask in macros accessing registers.|Used to convert bit name to bit mask in macros accessing registers.|Used to convert bit name to bit mask in macros accessing registers.|Used to convert bit name to bit mask in macros accessing registers.|Used to convert bit name to bit mask in macros accessing registers.]
Doc_Misra_Rule_2_Location=[IO_Map.h|IO_Map.h|IO_Map.h|IO_Map.h|IO_Map.h|IO_Map.h|IO_Map.h]
Doc_Misra_Rule_3_Location=[PE_Types.h|Cpu|Vectors.c|PE_Types.h|Cpu|Vectors.c|PE_Types.h|Cpu|Vectors.c|PE_Types.h|Cpu|Vectors.c|PE_Types.h|Cpu|Vectors.c|PE_Types.h|Cpu|Vectors.c|PE_Types.h|Cpu|Vectors.c]
Doc_Misra_Rule_3_Location_Reason=[The file contains ASM language, but it is isolated in C macros.|The file contains ASM language, but it is isolated in C macros.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The file contains ASM language, but it is isolated in C macros.|The file contains ASM language, but it is isolated in C macros.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The file contains ASM language, but it is isolated in C macros.|The file contains ASM language, but it is isolated in C macros.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The file contains ASM language, but it is isolated in C macros.|The file contains ASM language, but it is isolated in C macros.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The file contains ASM language, but it is isolated in C macros.|The file contains ASM language, but it is isolated in C macros.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The file contains ASM language, but it is isolated in C macros.|The file contains ASM language, but it is isolated in C macros.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The file contains ASM language, but it is isolated in C macros.|The file contains ASM language, but it is isolated in C macros.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.]
Doc_Misra_Rule_4_Location=[PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info]
Doc_Misra_Rule_4_Location_Reason=[Follows the list of implementation dependent behavior used in Processor Expert. See documentation of CodeWarrior MCU Build tools for more information on topics not specified below:|Program overloads void __init_hardware(void) function from the standard startup to provide initialization of clocks and external bus early after reset, see <a href="ResetScenario.html">Reset Scenario</a>.|Program is finished at the end of main function in the infinite loop.|Execution character set and corresponding values are documented in rule 3.2 in this table.|Volatile declarations are used to access peripheral registers (memory mapped).|Pragma directives are used and commented in the source code. See also documented rule 3.4 in this table.|Follows the list of implementation dependent behavior used in Processor Expert. See documentation of CodeWarrior MCU Build tools for more information on topics not specified below:|Program overloads void __init_hardware(void) function from the standard startup to provide initialization of clocks and external bus early after reset, see <a href="ResetScenario.html">Reset Scenario</a>.|Program is finished at the end of main function in the infinite loop.|Execution character set and corresponding values are documented in rule 3.2 in this table.|Volatile declarations are used to access peripheral registers (memory mapped).|Pragma directives are used and commented in the source code. See also documented rule 3.4 in this table.|Follows the list of implementation dependent behavior used in Processor Expert. See documentation of CodeWarrior MCU Build tools for more information on topics not specified below:|Program overloads void __init_hardware(void) function from the standard startup to provide initialization of clocks and external bus early after reset, see <a href="ResetScenario.html">Reset Scenario</a>.|Program is finished at the end of main function in the infinite loop.|Execution character set and corresponding values are documented in rule 3.2 in this table.|Volatile declarations are used to access peripheral registers (memory mapped).|Pragma directives are used and commented in the source code. See also documented rule 3.4 in this table.|Follows the list of implementation dependent behavior used in Processor Expert. See documentation of CodeWarrior MCU Build tools for more information on topics not specified below:|Program overloads void __init_hardware(void) function from the standard startup to provide initialization of clocks and external bus early after reset, see <a href="ResetScenario.html">Reset Scenario</a>.|Program is finished at the end of main function in the infinite loop.|Execution character set and corresponding values are documented in rule 3.2 in this table.|Volatile declarations are used to access peripheral registers (memory mapped).|Pragma directives are used and commented in the source code. See also documented rule 3.4 in this table.|Follows the list of implementation dependent behavior used in Processor Expert. See documentation of CodeWarrior MCU Build tools for more information on topics not specified below:|Program overloads void __init_hardware(void) function from the standard startup to provide initialization of clocks and external bus early after reset, see <a href="ResetScenario.html">Reset Scenario</a>.|Program is finished at the end of main function in the infinite loop.|Execution character set and corresponding values are documented in rule 3.2 in this table.|Volatile declarations are used to access peripheral registers (memory mapped).|Pragma directives are used and commented in the source code. See also documented rule 3.4 in this table.|Follows the list of implementation dependent behavior used in Processor Expert. See documentation of CodeWarrior MCU Build tools for more information on topics not specified below:|Program overloads void __init_hardware(void) function from the standard startup to provide initialization of clocks and external bus early after reset, see <a href="ResetScenario.html">Reset Scenario</a>.|Program is finished at the end of main function in the infinite loop.|Execution character set and corresponding values are documented in rule 3.2 in this table.|Volatile declarations are used to access peripheral registers (memory mapped).|Pragma directives are used and commented in the source code. See also documented rule 3.4 in this table.|Follows the list of implementation dependent behavior used in Processor Expert. See documentation of CodeWarrior MCU Build tools for more information on topics not specified below:|Program overloads void __init_hardware(void) function from the standard startup to provide initialization of clocks and external bus early after reset, see <a href="ResetScenario.html">Reset Scenario</a>.|Program is finished at the end of main function in the infinite loop.|Execution character set and corresponding values are documented in rule 3.2 in this table.|Volatile declarations are used to access peripheral registers (memory mapped).|Pragma directives are used and commented in the source code. See also documented rule 3.4 in this table.]
Doc_Misra_Rule_5_Location=[PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info]
Doc_Misra_Rule_6_Location=[PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info]
Doc_Misra_Rule_7_Location=[PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info]
Doc_Misra_Rule_7_Location_Reason=[Some components use pragma directive to determine the memory segment, where code and/or data will be used (see below). All other uses of #pragma directives are commented in the generated source code.|Some components use pragma directive to determine the memory segment, where code and/or data will be used (see below). All other uses of #pragma directives are commented in the generated source code.|Some components use pragma directive to determine the memory segment, where code and/or data will be used (see below). All other uses of #pragma directives are commented in the generated source code.|Some components use pragma directive to determine the memory segment, where code and/or data will be used (see below). All other uses of #pragma directives are commented in the generated source code.|Some components use pragma directive to determine the memory segment, where code and/or data will be used (see below). All other uses of #pragma directives are commented in the generated source code.|Some components use pragma directive to determine the memory segment, where code and/or data will be used (see below). All other uses of #pragma directives are commented in the generated source code.|Some components use pragma directive to determine the memory segment, where code and/or data will be used (see below). All other uses of #pragma directives are commented in the generated source code.]
Doc_Misra_Rule_8_Location=[CAU_LDD|CAU_LDD|CAU_LDD|CAU_LDD|CAU_LDD|CAU_LDD|CAU_LDD]
Doc_Misra_Rule_8_Location_Reason=[CAU component uses an external CAU library that is not MISRA compliant. CAU component's code itself is MISRA compliant.|CAU component uses an external CAU library that is not MISRA compliant. CAU component's code itself is MISRA compliant.|CAU component uses an external CAU library that is not MISRA compliant. CAU component's code itself is MISRA compliant.|CAU component uses an external CAU library that is not MISRA compliant. CAU component's code itself is MISRA compliant.|CAU component uses an external CAU library that is not MISRA compliant. CAU component's code itself is MISRA compliant.|CAU component uses an external CAU library that is not MISRA compliant. CAU component's code itself is MISRA compliant.|CAU component uses an external CAU library that is not MISRA compliant. CAU component's code itself is MISRA compliant.]
Doc_Misra_Rule_9_Location=[CPU|Main.c|CPU|Main.c|CPU|Main.c|CPU|Main.c|CPU|Main.c|CPU|Main.c|CPU|Main.c]
InterruptVectorAddrs=[0|4|8|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96|100|104|108|112|116|120|124|128|132|136|140|144|148|152|156|160|164|168|172|176|180|184|188]
InterruptVectors=[ivINT_Initial_Stack_Pointer|ivINT_Initial_Program_Counter|ivINT_NMI|ivINT_Hard_Fault|ivINT_Reserved4|ivINT_Reserved5|ivINT_Reserved6|ivINT_Reserved7|ivINT_Reserved8|ivINT_Reserved9|ivINT_Reserved10|ivINT_SVCall|ivINT_Reserved12|ivINT_Reserved13|ivINT_PendableSrvReq|ivINT_SysTick|ivINT_DMA0|ivINT_DMA1|ivINT_DMA2|ivINT_DMA3|ivINT_Reserved20|ivINT_FTFA|ivINT_LVD_LVW|ivINT_LLW|ivINT_I2C0|ivINT_Reserved25|ivINT_SPI0|ivINT_Reserved27|ivINT_UART0|ivINT_Reserved29|ivINT_Reserved30|ivINT_ADC0|ivINT_CMP0|ivINT_TPM0|ivINT_TPM1|ivINT_Reserved35|ivINT_RTC|ivINT_RTC_Seconds|ivINT_PIT|ivINT_Reserved39|ivINT_Reserved40|ivINT_DAC0|ivINT_TSI0|ivINT_MCG|ivINT_LPTimer|ivINT_Reserved45|ivINT_PORTA|ivINT_PORTB]
PE_MisraErrorCodes=[950]
RTOSAdap_enum_componentTypes=[HAL_UART_Polling|HAL_UART_Int|HAL_I2C_Polling|HAL_I2C_Int|HAL_GPIO|HAL_ADC|HAL_RTC|HAL_Ethernet|HAL_TimerUnit|AsyncSerial_LDD|USB_LDD]
RTOSAdap_enum_defaultParameterNames=[componentType|simpleComponentType|componentInstanceName|genReentrantMethods|genCriticalSectionMethods|constantDeclarationsThread|allocatedDevice|allocatedDeviceBaseAddr|SPIN_LOCK]
RTOSAdap_enum_simpleComponentTypes=[HAL_UART|HAL_I2C|HAL_GPIO|HAL_ADC|HAL_RTC|HAL_Ethernet|HAL_TimerUnit|AsyncSerial_LDD|USB_LDD]
revAuth=[LH|]
revCmnt_0=[Type char_t definition added.|Support of C++.]
revDate=[17.09.2012|14.01.2009]
revLvl=[3|0]
revVer=[01.01|01.00]
revVrf=[PE|]

 LOCAL SYMBOLS (alphabet order)
-------------------------------
DeviceModule=PE_Types
DeviceName=PE_Types
DeviceType=PE_Types
EventModules=[Events]
ModuleName=PE_Types

GLOBAL SYMBOLS (alphabet order)
-------------------------------
ADC0AsynchroClockAddr=1073983496
ADC0AsynchroClockReg=ADC0_CFG1
ADC0BusClockAddr=1073983496
ADC0BusClockReg=ADC0_CFG1
ADC0ClkSelAddr=1073983496
ADC0ClkSelReg=ADC0_CFG1
ActiveConfigIdentifier=PEcfg_FLASH
ActiveConfiguration=FLASH
CPUDB_BUS_FREQ_HZ_MAX=24000000
CPUDB_CPU_MASTER=MKL05Z4
CPUDB_CW_MCU_ID=28695
CPUDB_CW_MCU_NAME=MKL05Z32xxx4
CPUDB_LQFP32=-1
CPUDB_MKL05Z32xxx4=-1
CPUDB_MKL05Z4=-1
CPUDB_PACKAGE=LQFP32
CPUDB_PLL_INPUT_FREQ_HZ_MAX=4000000
CPUDB_PLL_INPUT_FREQ_HZ_MIN=2000000
CPUDB_PLL_OUTPUT_FREQ_HZ_MAX=100000000
CPUDB_PLL_OUTPUT_FREQ_HZ_MIN=48000000
CPUDB_ProgramFlashBlockCount=1
CPUDB_ProgramFlashEraseUnitSize=1024
CPUDB_ProgramFlashSize=32768
CPUDB_ProgramFlashWriteUnitSize=4
CPUDB_SYSTEM_FREQ_HZ_MAX=48000000
CPU_DB_version=3.00.000
CPUendian=little
CPUfamily=Kinetis
CPUproducer=Freescale
CPUrunSpeedModeNum=1
CPUsubFamily=MKL05
CPUtype=MKL05Z32LC4
CPUvariant=MKL05Z32VLC4
ClientDir_Binary=\home\karibe\src\FRDM_workspace\kl05_teset\Sources\
ClientDir_Code=\home\karibe\src\FRDM_workspace\kl05_teset\Generated_Code\
ClientDir_PE=\home\karibe\eclipse\ProcessorExpert\
ClientDir_Project=\home\karibe\src\FRDM_workspace\kl05_teset\
CommentBrackets=/**/
Compiler=GNUC
CompilerID=GNU C Compiler
DirRel_Binary=Sources\
DirRel_BinaryToEvents=
DirRel_Code=Generated_Code\
DirRel_Docs=Documentation\
DirRel_EventToBinary=
DirRel_Events=Sources\
DirRel_ProjectSettings=Project_Settings\
DirRel_StaticCode=Generated_Code\
EclipseProjectName=kl05_teset
InterruptTableType=ROM
Language=ANSIC
Not_for_MPC512x=
OnChipEEPROM=0
OnChipFLASH=32768
OnChipRAM=4096
PE_CFG_PEX_DRV=5_3
PE_DEVELOPMENT=
PE_ECLIPSE=
PE_GENERATING=
PE_G_CPUCFG_AutoIncludeIO_Map=yes
PE_G_CPUCFG_EntryPointFunctionName=__init_hardware
PE_G_CPUCFG_EntryPointFunctionReturn=
PE_G_CPUCFG_EntryPointFunctionReturnType=void
PE_G_CPUCFG_GenerateLinkerFile=yes
PE_G_CPUCFG_GenerateMainModule=yes
PE_G_CPUCFG_InitIntVectorTableSym=yes
PE_G_CPUCFG_ManageInterruptVectorTable=yes
PE_G_CPU_Doxygen_RegInitValue_And_Mask_GPIOB_PDDR= 0
PE_G_CPU_Doxygen_RegInitValue_And_Mask_GPIOB_PDOR= 2047
PE_G_CPU_Doxygen_RegInitValue_And_Mask_LPTMR0_CMR=4294967281
PE_G_CPU_Doxygen_RegInitValue_And_Mask_LPTMR0_CSR=4294967295
PE_G_CPU_Doxygen_RegInitValue_And_Mask_LPTMR0_PSR=4294967247
PE_G_CPU_Doxygen_RegInitValue_And_Mask_NVIC_IPR7=127
PE_G_CPU_Doxygen_RegInitValue_And_Mask_NVIC_ISER=0
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTB_PCR0=16778752
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTB_PCR1=16778752
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTB_PCR10=16778752
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTB_PCR2=16778752
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTB_PCR3=16778752
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTB_PCR4=16778752
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTB_PCR5=16778752
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTB_PCR6=16778752
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTB_PCR7=16778752
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTB_PCR8=16778752
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTB_PCR9=16778752
PE_G_CPU_Doxygen_RegInitValue_And_Mask_SIM_SCGC5=0
PE_G_CPU_Doxygen_RegInitValue_And_Mask_SYST_CSR=4294967295
PE_G_CPU_Doxygen_RegInitValue_And_Mask_SYST_CVR=4294967295
PE_G_CPU_Doxygen_RegInitValue_And_Mask_SYST_RVR=4288967295
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_GPIOB_PDDR= 2047
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_GPIOB_PDOR= 0
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_LPTMR0_CMR=14
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_LPTMR0_CSR=193
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_LPTMR0_PSR=48
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_NVIC_IPR7=128
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_NVIC_ISER=268435456
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTB_PCR0=256
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTB_PCR1=256
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTB_PCR10=256
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTB_PCR2=256
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTB_PCR3=256
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTB_PCR4=256
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTB_PCR5=256
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTB_PCR6=256
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTB_PCR7=256
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTB_PCR8=256
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTB_PCR9=256
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_SIM_SCGC5=1
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_SYST_CSR=5
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_SYST_CVR=0
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_SYST_RVR=6000000
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set0_PORTB_PCR0=16778752
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set0_PORTB_PCR1=16778752
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set0_PORTB_PCR10=16778752
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set0_PORTB_PCR2=16778752
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set0_PORTB_PCR3=16778752
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set0_PORTB_PCR4=16778752
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set0_PORTB_PCR5=16778752
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set0_PORTB_PCR6=16778752
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set0_PORTB_PCR7=16778752
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set0_PORTB_PCR8=16778752
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set0_PORTB_PCR9=16778752
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set1_PORTB_PCR0=256
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set1_PORTB_PCR1=256
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set1_PORTB_PCR10=256
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set1_PORTB_PCR2=256
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set1_PORTB_PCR3=256
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set1_PORTB_PCR4=256
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set1_PORTB_PCR5=256
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set1_PORTB_PCR6=256
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set1_PORTB_PCR7=256
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set1_PORTB_PCR8=256
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set1_PORTB_PCR9=256
PE_G_CRI_CPUINIT_set0_SCB_SHPR3=4278190080
PE_G_CRI_CPUINIT_set1_SCB_SHPR3=0
PE_G_Doxygen_Support=
PE_G_EBGN_SysTickBeanName=SysTick
PE_G_GenBitMask=
PE_G_IOMapRegBitGrpPrefix=
PE_G_IOMapRegBitGrpPrefix_ADC0_CFG1=ADC_CFG1
PE_G_IOMapRegBitGrpPrefix_ADC0_CFG2=ADC_CFG2
PE_G_IOMapRegBitGrpPrefix_ADC0_CLP0=ADC_CLP0
PE_G_IOMapRegBitGrpPrefix_ADC0_CLP1=ADC_CLP1
PE_G_IOMapRegBitGrpPrefix_ADC0_CLP2=ADC_CLP2
PE_G_IOMapRegBitGrpPrefix_ADC0_CLP3=ADC_CLP3
PE_G_IOMapRegBitGrpPrefix_ADC0_CLP4=ADC_CLP4
PE_G_IOMapRegBitGrpPrefix_ADC0_CLPD=ADC_CLPD
PE_G_IOMapRegBitGrpPrefix_ADC0_CLPS=ADC_CLPS
PE_G_IOMapRegBitGrpPrefix_ADC0_CV1=ADC_CV1
PE_G_IOMapRegBitGrpPrefix_ADC0_CV2=ADC_CV2
PE_G_IOMapRegBitGrpPrefix_ADC0_OFS=ADC_OFS
PE_G_IOMapRegBitGrpPrefix_ADC0_PG=ADC_PG
PE_G_IOMapRegBitGrpPrefix_ADC0_RA=ADC_R
PE_G_IOMapRegBitGrpPrefix_ADC0_RB=ADC_R
PE_G_IOMapRegBitGrpPrefix_ADC0_SC1A=ADC_SC1
PE_G_IOMapRegBitGrpPrefix_ADC0_SC1B=ADC_SC1
PE_G_IOMapRegBitGrpPrefix_ADC0_SC2=ADC_SC2
PE_G_IOMapRegBitGrpPrefix_ADC0_SC3=ADC_SC3
PE_G_IOMapRegBitGrpPrefix_BP_COMP0=BP_COMP
PE_G_IOMapRegBitGrpPrefix_BP_COMP1=BP_COMP
PE_G_IOMapRegBitGrpPrefix_CMP0_CR0=CMP_CR0
PE_G_IOMapRegBitGrpPrefix_CMP0_CR1=CMP_CR1
PE_G_IOMapRegBitGrpPrefix_CMP0_DACCR=CMP_DACCR
PE_G_IOMapRegBitGrpPrefix_CMP0_FPR=CMP_FPR
PE_G_IOMapRegBitGrpPrefix_CMP0_MUXCR=CMP_MUXCR
PE_G_IOMapRegBitGrpPrefix_CMP0_SCR=CMP_SCR
PE_G_IOMapRegBitGrpPrefix_DAC0_C0=DAC_C0
PE_G_IOMapRegBitGrpPrefix_DAC0_C1=DAC_C1
PE_G_IOMapRegBitGrpPrefix_DAC0_C2=DAC_C2
PE_G_IOMapRegBitGrpPrefix_DAC0_DAT0H=DAC_DATH
PE_G_IOMapRegBitGrpPrefix_DAC0_DAT0L=DAC_DATL
PE_G_IOMapRegBitGrpPrefix_DAC0_DAT1H=DAC_DATH
PE_G_IOMapRegBitGrpPrefix_DAC0_DAT1L=DAC_DATL
PE_G_IOMapRegBitGrpPrefix_DAC0_SR=DAC_SR
PE_G_IOMapRegBitGrpPrefix_DCRDR=CoreDebug_base_DCRDR
PE_G_IOMapRegBitGrpPrefix_DCRSR=CoreDebug_base_DCRSR
PE_G_IOMapRegBitGrpPrefix_DEMCR=CoreDebug_base_DEMCR
PE_G_IOMapRegBitGrpPrefix_DHCSR_Read=CoreDebug_base_DHCSR_Read
PE_G_IOMapRegBitGrpPrefix_DHCSR_Write=CoreDebug_base_DHCSR_Write
PE_G_IOMapRegBitGrpPrefix_DMAMUX0_CHCFG0=DMAMUX_CHCFG
PE_G_IOMapRegBitGrpPrefix_DMAMUX0_CHCFG1=DMAMUX_CHCFG
PE_G_IOMapRegBitGrpPrefix_DMAMUX0_CHCFG2=DMAMUX_CHCFG
PE_G_IOMapRegBitGrpPrefix_DMAMUX0_CHCFG3=DMAMUX_CHCFG
PE_G_IOMapRegBitGrpPrefix_DMA_DAR0=DMA_DAR
PE_G_IOMapRegBitGrpPrefix_DMA_DAR1=DMA_DAR
PE_G_IOMapRegBitGrpPrefix_DMA_DAR2=DMA_DAR
PE_G_IOMapRegBitGrpPrefix_DMA_DAR3=DMA_DAR
PE_G_IOMapRegBitGrpPrefix_DMA_DCR0=DMA_DCR
PE_G_IOMapRegBitGrpPrefix_DMA_DCR1=DMA_DCR
PE_G_IOMapRegBitGrpPrefix_DMA_DCR2=DMA_DCR
PE_G_IOMapRegBitGrpPrefix_DMA_DCR3=DMA_DCR
PE_G_IOMapRegBitGrpPrefix_DMA_DSR0=DMA_DSR
PE_G_IOMapRegBitGrpPrefix_DMA_DSR1=DMA_DSR
PE_G_IOMapRegBitGrpPrefix_DMA_DSR2=DMA_DSR
PE_G_IOMapRegBitGrpPrefix_DMA_DSR3=DMA_DSR
PE_G_IOMapRegBitGrpPrefix_DMA_DSR_BCR0=DMA_DSR_BCR
PE_G_IOMapRegBitGrpPrefix_DMA_DSR_BCR1=DMA_DSR_BCR
PE_G_IOMapRegBitGrpPrefix_DMA_DSR_BCR2=DMA_DSR_BCR
PE_G_IOMapRegBitGrpPrefix_DMA_DSR_BCR3=DMA_DSR_BCR
PE_G_IOMapRegBitGrpPrefix_DMA_SAR0=DMA_SAR
PE_G_IOMapRegBitGrpPrefix_DMA_SAR1=DMA_SAR
PE_G_IOMapRegBitGrpPrefix_DMA_SAR2=DMA_SAR
PE_G_IOMapRegBitGrpPrefix_DMA_SAR3=DMA_SAR
PE_G_IOMapRegBitGrpPrefix_DWT_COMP0=DWT_COMP
PE_G_IOMapRegBitGrpPrefix_DWT_COMP1=DWT_COMP
PE_G_IOMapRegBitGrpPrefix_DWT_FUNCTION0=DWT_FUNCTION
PE_G_IOMapRegBitGrpPrefix_DWT_FUNCTION1=DWT_FUNCTION
PE_G_IOMapRegBitGrpPrefix_DWT_MASK0=DWT_MASK
PE_G_IOMapRegBitGrpPrefix_DWT_MASK1=DWT_MASK
PE_G_IOMapRegBitGrpPrefix_FGPIOA_PCOR=FGPIO_PCOR
PE_G_IOMapRegBitGrpPrefix_FGPIOA_PDDR=FGPIO_PDDR
PE_G_IOMapRegBitGrpPrefix_FGPIOA_PDIR=FGPIO_PDIR
PE_G_IOMapRegBitGrpPrefix_FGPIOA_PDOR=FGPIO_PDOR
PE_G_IOMapRegBitGrpPrefix_FGPIOA_PSOR=FGPIO_PSOR
PE_G_IOMapRegBitGrpPrefix_FGPIOA_PTOR=FGPIO_PTOR
PE_G_IOMapRegBitGrpPrefix_FGPIOB_PCOR=FGPIO_PCOR
PE_G_IOMapRegBitGrpPrefix_FGPIOB_PDDR=FGPIO_PDDR
PE_G_IOMapRegBitGrpPrefix_FGPIOB_PDIR=FGPIO_PDIR
PE_G_IOMapRegBitGrpPrefix_FGPIOB_PDOR=FGPIO_PDOR
PE_G_IOMapRegBitGrpPrefix_FGPIOB_PSOR=FGPIO_PSOR
PE_G_IOMapRegBitGrpPrefix_FGPIOB_PTOR=FGPIO_PTOR
PE_G_IOMapRegBitGrpPrefix_GPIOA_PCOR=GPIO_PCOR
PE_G_IOMapRegBitGrpPrefix_GPIOA_PDDR=GPIO_PDDR
PE_G_IOMapRegBitGrpPrefix_GPIOA_PDIR=GPIO_PDIR
PE_G_IOMapRegBitGrpPrefix_GPIOA_PDOR=GPIO_PDOR
PE_G_IOMapRegBitGrpPrefix_GPIOA_PSOR=GPIO_PSOR
PE_G_IOMapRegBitGrpPrefix_GPIOA_PTOR=GPIO_PTOR
PE_G_IOMapRegBitGrpPrefix_GPIOB_PCOR=GPIO_PCOR
PE_G_IOMapRegBitGrpPrefix_GPIOB_PDDR=GPIO_PDDR
PE_G_IOMapRegBitGrpPrefix_GPIOB_PDIR=GPIO_PDIR
PE_G_IOMapRegBitGrpPrefix_GPIOB_PDOR=GPIO_PDOR
PE_G_IOMapRegBitGrpPrefix_GPIOB_PSOR=GPIO_PSOR
PE_G_IOMapRegBitGrpPrefix_GPIOB_PTOR=GPIO_PTOR
PE_G_IOMapRegBitGrpPrefix_I2C0_A1=I2C_A1
PE_G_IOMapRegBitGrpPrefix_I2C0_A2=I2C_A2
PE_G_IOMapRegBitGrpPrefix_I2C0_C1=I2C_C1
PE_G_IOMapRegBitGrpPrefix_I2C0_C2=I2C_C2
PE_G_IOMapRegBitGrpPrefix_I2C0_D=I2C_D
PE_G_IOMapRegBitGrpPrefix_I2C0_F=I2C_F
PE_G_IOMapRegBitGrpPrefix_I2C0_FLT=I2C_FLT
PE_G_IOMapRegBitGrpPrefix_I2C0_RA=I2C_RA
PE_G_IOMapRegBitGrpPrefix_I2C0_S=I2C_S
PE_G_IOMapRegBitGrpPrefix_I2C0_SLTH=I2C_SLTH
PE_G_IOMapRegBitGrpPrefix_I2C0_SLTL=I2C_SLTL
PE_G_IOMapRegBitGrpPrefix_I2C0_SMB=I2C_SMB
PE_G_IOMapRegBitGrpPrefix_LPTMR0_CMR=LPTMR_CMR
PE_G_IOMapRegBitGrpPrefix_LPTMR0_CNR=LPTMR_CNR
PE_G_IOMapRegBitGrpPrefix_LPTMR0_CSR=LPTMR_CSR
PE_G_IOMapRegBitGrpPrefix_LPTMR0_PSR=LPTMR_PSR
PE_G_IOMapRegBitGrpPrefix_MTBDWT_COMP0=MTBDWT_COMP
PE_G_IOMapRegBitGrpPrefix_MTBDWT_COMP1=MTBDWT_COMP
PE_G_IOMapRegBitGrpPrefix_MTBDWT_COMPID0=MTBDWT_COMPID
PE_G_IOMapRegBitGrpPrefix_MTBDWT_COMPID1=MTBDWT_COMPID
PE_G_IOMapRegBitGrpPrefix_MTBDWT_COMPID2=MTBDWT_COMPID
PE_G_IOMapRegBitGrpPrefix_MTBDWT_COMPID3=MTBDWT_COMPID
PE_G_IOMapRegBitGrpPrefix_MTBDWT_FCT0=MTBDWT_FCT
PE_G_IOMapRegBitGrpPrefix_MTBDWT_FCT1=MTBDWT_FCT
PE_G_IOMapRegBitGrpPrefix_MTBDWT_MASK0=MTBDWT_MASK
PE_G_IOMapRegBitGrpPrefix_MTBDWT_MASK1=MTBDWT_MASK
PE_G_IOMapRegBitGrpPrefix_MTBDWT_PERIPHID0=MTBDWT_PERIPHID
PE_G_IOMapRegBitGrpPrefix_MTBDWT_PERIPHID1=MTBDWT_PERIPHID
PE_G_IOMapRegBitGrpPrefix_MTBDWT_PERIPHID2=MTBDWT_PERIPHID
PE_G_IOMapRegBitGrpPrefix_MTBDWT_PERIPHID3=MTBDWT_PERIPHID
PE_G_IOMapRegBitGrpPrefix_MTBDWT_PERIPHID4=MTBDWT_PERIPHID
PE_G_IOMapRegBitGrpPrefix_MTBDWT_PERIPHID5=MTBDWT_PERIPHID
PE_G_IOMapRegBitGrpPrefix_MTBDWT_PERIPHID6=MTBDWT_PERIPHID
PE_G_IOMapRegBitGrpPrefix_MTBDWT_PERIPHID7=MTBDWT_PERIPHID
PE_G_IOMapRegBitGrpPrefix_MTB_COMPID0=MTB_COMPID
PE_G_IOMapRegBitGrpPrefix_MTB_COMPID1=MTB_COMPID
PE_G_IOMapRegBitGrpPrefix_MTB_COMPID2=MTB_COMPID
PE_G_IOMapRegBitGrpPrefix_MTB_COMPID3=MTB_COMPID
PE_G_IOMapRegBitGrpPrefix_MTB_PERIPHID0=MTB_PERIPHID
PE_G_IOMapRegBitGrpPrefix_MTB_PERIPHID1=MTB_PERIPHID
PE_G_IOMapRegBitGrpPrefix_MTB_PERIPHID2=MTB_PERIPHID
PE_G_IOMapRegBitGrpPrefix_MTB_PERIPHID3=MTB_PERIPHID
PE_G_IOMapRegBitGrpPrefix_MTB_PERIPHID4=MTB_PERIPHID
PE_G_IOMapRegBitGrpPrefix_MTB_PERIPHID5=MTB_PERIPHID
PE_G_IOMapRegBitGrpPrefix_MTB_PERIPHID6=MTB_PERIPHID
PE_G_IOMapRegBitGrpPrefix_MTB_PERIPHID7=MTB_PERIPHID
PE_G_IOMapRegBitGrpPrefix_NVIC_IPR0=NVIC_IP
PE_G_IOMapRegBitGrpPrefix_NVIC_IPR1=NVIC_IP
PE_G_IOMapRegBitGrpPrefix_NVIC_IPR2=NVIC_IP
PE_G_IOMapRegBitGrpPrefix_NVIC_IPR3=NVIC_IP
PE_G_IOMapRegBitGrpPrefix_NVIC_IPR4=NVIC_IP
PE_G_IOMapRegBitGrpPrefix_NVIC_IPR5=NVIC_IP
PE_G_IOMapRegBitGrpPrefix_NVIC_IPR6=NVIC_IP
PE_G_IOMapRegBitGrpPrefix_NVIC_IPR7=NVIC_IP
PE_G_IOMapRegBitGrpPrefix_OSC0_CR=OSC_CR
PE_G_IOMapRegBitGrpPrefix_PIT_CVAL0=PIT_CVAL
PE_G_IOMapRegBitGrpPrefix_PIT_CVAL1=PIT_CVAL
PE_G_IOMapRegBitGrpPrefix_PIT_LDVAL0=PIT_LDVAL
PE_G_IOMapRegBitGrpPrefix_PIT_LDVAL1=PIT_LDVAL
PE_G_IOMapRegBitGrpPrefix_PIT_TCTRL0=PIT_TCTRL
PE_G_IOMapRegBitGrpPrefix_PIT_TCTRL1=PIT_TCTRL
PE_G_IOMapRegBitGrpPrefix_PIT_TFLG0=PIT_TFLG
PE_G_IOMapRegBitGrpPrefix_PIT_TFLG1=PIT_TFLG
PE_G_IOMapRegBitGrpPrefix_PORTA_GPCHR=PORT_GPCHR
PE_G_IOMapRegBitGrpPrefix_PORTA_GPCLR=PORT_GPCLR
PE_G_IOMapRegBitGrpPrefix_PORTA_ISFR=PORT_ISFR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR0=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR1=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR10=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR11=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR12=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR13=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR14=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR15=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR16=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR17=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR18=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR19=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR2=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR20=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR21=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR22=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR23=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR24=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR25=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR26=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR27=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR28=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR29=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR3=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR30=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR31=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR4=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR5=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR6=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR7=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR8=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR9=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_GPCHR=PORT_GPCHR
PE_G_IOMapRegBitGrpPrefix_PORTB_GPCLR=PORT_GPCLR
PE_G_IOMapRegBitGrpPrefix_PORTB_ISFR=PORT_ISFR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR0=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR1=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR10=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR11=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR12=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR13=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR14=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR15=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR16=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR17=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR18=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR19=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR2=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR20=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR21=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR22=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR23=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR24=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR25=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR26=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR27=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR28=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR29=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR3=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR30=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR31=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR4=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR5=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR6=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR7=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR8=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR9=PORT_PCR
PE_G_IOMapRegBitGrpPrefix_ROM_COMPID0=ROM_COMPID
PE_G_IOMapRegBitGrpPrefix_ROM_COMPID1=ROM_COMPID
PE_G_IOMapRegBitGrpPrefix_ROM_COMPID2=ROM_COMPID
PE_G_IOMapRegBitGrpPrefix_ROM_COMPID3=ROM_COMPID
PE_G_IOMapRegBitGrpPrefix_ROM_ENTRY0=ROM_ENTRY
PE_G_IOMapRegBitGrpPrefix_ROM_ENTRY1=ROM_ENTRY
PE_G_IOMapRegBitGrpPrefix_ROM_ENTRY2=ROM_ENTRY
PE_G_IOMapRegBitGrpPrefix_SPI0_BR=SPI_BR
PE_G_IOMapRegBitGrpPrefix_SPI0_C1=SPI_C1
PE_G_IOMapRegBitGrpPrefix_SPI0_C2=SPI_C2
PE_G_IOMapRegBitGrpPrefix_SPI0_D=SPI_D
PE_G_IOMapRegBitGrpPrefix_SPI0_M=SPI_M
PE_G_IOMapRegBitGrpPrefix_SPI0_S=SPI_S
PE_G_IOMapRegBitGrpPrefix_SYST_CALIB=SysTick_CALIB
PE_G_IOMapRegBitGrpPrefix_SYST_CSR=SysTick_CSR
PE_G_IOMapRegBitGrpPrefix_SYST_CVR=SysTick_CVR
PE_G_IOMapRegBitGrpPrefix_SYST_RVR=SysTick_RVR
PE_G_IOMapRegBitGrpPrefix_TPM0_C0SC=TPM_CnSC
PE_G_IOMapRegBitGrpPrefix_TPM0_C0V=TPM_CnV
PE_G_IOMapRegBitGrpPrefix_TPM0_C1SC=TPM_CnSC
PE_G_IOMapRegBitGrpPrefix_TPM0_C1V=TPM_CnV
PE_G_IOMapRegBitGrpPrefix_TPM0_C2SC=TPM_CnSC
PE_G_IOMapRegBitGrpPrefix_TPM0_C2V=TPM_CnV
PE_G_IOMapRegBitGrpPrefix_TPM0_C3SC=TPM_CnSC
PE_G_IOMapRegBitGrpPrefix_TPM0_C3V=TPM_CnV
PE_G_IOMapRegBitGrpPrefix_TPM0_C4SC=TPM_CnSC
PE_G_IOMapRegBitGrpPrefix_TPM0_C4V=TPM_CnV
PE_G_IOMapRegBitGrpPrefix_TPM0_C5SC=TPM_CnSC
PE_G_IOMapRegBitGrpPrefix_TPM0_C5V=TPM_CnV
PE_G_IOMapRegBitGrpPrefix_TPM0_CNT=TPM_CNT
PE_G_IOMapRegBitGrpPrefix_TPM0_CONF=TPM_CONF
PE_G_IOMapRegBitGrpPrefix_TPM0_MOD=TPM_MOD
PE_G_IOMapRegBitGrpPrefix_TPM0_SC=TPM_SC
PE_G_IOMapRegBitGrpPrefix_TPM0_STATUS=TPM_STATUS
PE_G_IOMapRegBitGrpPrefix_TPM1_C0SC=TPM_CnSC
PE_G_IOMapRegBitGrpPrefix_TPM1_C0V=TPM_CnV
PE_G_IOMapRegBitGrpPrefix_TPM1_C1SC=TPM_CnSC
PE_G_IOMapRegBitGrpPrefix_TPM1_C1V=TPM_CnV
PE_G_IOMapRegBitGrpPrefix_TPM1_CNT=TPM_CNT
PE_G_IOMapRegBitGrpPrefix_TPM1_CONF=TPM_CONF
PE_G_IOMapRegBitGrpPrefix_TPM1_MOD=TPM_MOD
PE_G_IOMapRegBitGrpPrefix_TPM1_SC=TPM_SC
PE_G_IOMapRegBitGrpPrefix_TPM1_STATUS=TPM_STATUS
PE_G_IOMapRegBitGrpPrefix_TSI0_DATA=TSI_DATA
PE_G_IOMapRegBitGrpPrefix_TSI0_GENCS=TSI_GENCS
PE_G_IOMapRegBitGrpPrefix_TSI0_TSHD=TSI_TSHD
PE_G_MisraCnfBackParams_0=
PE_G_MisraCnfParams_0=
PE_G_MisraRuleList_0=
PE_G_MisraStackIdx=-1
PE_G_NO_SETREGMACROS=
PE_G_RTOSAdap_regCompIndex=2
PE_G_RTOSAdap_regCompInstance_Bits1_methodEnabled_ClrBit=
PE_G_RTOSAdap_regCompInstance_Bits1_methodEnabled_GetBit=
PE_G_RTOSAdap_regCompInstance_Bits1_methodEnabled_GetVal=
PE_G_RTOSAdap_regCompInstance_Bits1_methodEnabled_Init=
PE_G_RTOSAdap_regCompInstance_Bits1_methodEnabled_NegBit=
PE_G_RTOSAdap_regCompInstance_Bits1_methodEnabled_PutBit=
PE_G_RTOSAdap_regCompInstance_Bits1_methodEnabled_PutVal=
PE_G_RTOSAdap_regCompInstance_Bits1_methodEnabled_SetBit=
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_ClrBit=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t Bit))&Bits1_ClrBit
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_ConnectPin=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask PinMask))0
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_Deinit=(void (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_GetBit=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t Bit, bool *BitVal))&Bits1_GetBit
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_GetDir=(bool (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_GetRawBit=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t Bit, bool *BitVal))0
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_GetRawVal=(uint32_t (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_GetVal=(uint32_t (*)(LDD_TDeviceData *DeviceDataPtr))&Bits1_GetVal
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_Init=(LDD_TDeviceData* (*)(LDD_TUserData *UserDataPtr))&Bits1_Init
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_NegBit=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t Bit))&Bits1_NegBit
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_PutBit=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t Bit, bool Val))&Bits1_PutBit
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_PutVal=(void (*)(LDD_TDeviceData *DeviceDataPtr, uint32_t Val))&Bits1_PutVal
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_SetBit=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t Bit))&Bits1_SetBit
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_SetDir=(void (*)(LDD_TDeviceData *DeviceDataPtr, bool Dir))0
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_SetInput=(void (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_SetOutput=(void (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TI1_eventEnabled_OnInterrupt=
PE_G_RTOSAdap_regCompInstance_TI1_eventPtr_OnInterrupt=(void (*)(LDD_TUserData *UserDataPtr))&TI1_TI1_OnInterrupt
PE_G_RTOSAdap_regCompInstance_TI1_methodEnabled_Disable=
PE_G_RTOSAdap_regCompInstance_TI1_methodEnabled_Enable=
PE_G_RTOSAdap_regCompInstance_TI1_methodEnabled_Init=
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_Deinit=(void (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_Disable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))&TI1_Disable
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_Enable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))&TI1_Enable
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_GetDriverState=(LDD_TDriverState (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_GetEventMask=(LDD_TEventMask (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_GetEventStatus=(LDD_TEventMask (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_Init=(LDD_TDeviceData* (*)(LDD_TUserData *UserDataPtr))&TI1_Init
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_SelectPeriod=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, TU1_TClockList Period))0
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_SetEventMask=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask EventMask))0
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_SetFrequencyHz=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint16_t Frequency))0
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_SetFrequencyMHz=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint16_t Frequency))0
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_SetFrequencykHz=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint16_t Frequency))0
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_SetOperationMode=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TDriverOperationMode OperationMode, LDD_TCallback ModeChangeCallback, LDD_TCallbackParam *ModeChangeCallbackParamPtr))0
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_SetPeriodMS=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint16_t Time))0
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_SetPeriodReal=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TimerUnit_Tfloat Time))0
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_SetPeriodSec=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint16_t Time))0
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_SetPeriodUS=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint16_t Time))0
PE_G_RTOSAdap_regCompInstance_TU1_eventEnabled_OnCounterRestart=
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel0=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel1=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel2=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel3=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel4=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel5=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel6=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel7=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnCounterRestart=(void (*)(LDD_TUserData *UserDataPtr))&TU1_TU1_OnCounterRestart
PE_G_RTOSAdap_regCompInstance_TU1_methodEnabled_Disable=
PE_G_RTOSAdap_regCompInstance_TU1_methodEnabled_Enable=
PE_G_RTOSAdap_regCompInstance_TU1_methodEnabled_Init=
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_ConnectPin=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask PinMask))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_Deinit=(void (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_Disable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))&TU1_Disable
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_Enable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))&TU1_Enable
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetCaptureValue=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, TU1_TValueType *ValuePtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetCounterValue=(TU1_TValueType (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetDriverState=(LDD_TDriverState (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetEventMask=(LDD_TEventMask (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetEventStatus=(LDD_TEventMask (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetInputFrequency=(uint32_t (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetInputFrequencyReal=(LDD_TimerUnit_Tfloat (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetOffsetTicks=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, TU1_TValueType *TicksPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetPeriodTicks=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, TU1_TValueType *TicksPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_Init=(LDD_TDeviceData* (*)(LDD_TUserData *UserDataPtr))&TU1_Init
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_ResetCounter=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SelectCaptureEdge=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, LDD_TimerUnit_TEdge Edge))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SelectInputFrequency=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, TU1_TClockList InputFrequency))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SelectOutputAction=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, LDD_TimerUnit_TOutAction CompareAction, LDD_TimerUnit_TOutAction CounterAction))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SetEventMask=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask EventMask))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SetOffsetTicks=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, TU1_TValueType Ticks))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SetOperationMode=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TDriverOperationMode OperationMode, LDD_TCallback ModeChangeCallback, LDD_TCallbackParam *ModeChangeCallbackParamPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SetPeriodTicks=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, TU1_TValueType Ticks))0
PE_G_USE_UINTXX_T=
PE_ProductVersion=10.2
PEversion=05.06
PEversionDecimal=1286
ProcessorModule=Cpu
ProcessorName=Cpu
ProjectModule=ProcessorExpert
ProjectName=ProcessorExpert
ProjectStaticFilesGenerationMode=LINKED
ServerDir_PE=\home\karibe\eclipse\ProcessorExpert\
SetHighSpeedMode=
SupportedCPUfamily=
TimeStamp=2014-03-18, 02:40, # CodeGen: 88
Xtal_kHz=4000
Xtal_kHz_real=4000
ivINT_LPTimer=TU1_Interrupt
virtual_ADC0_TotalConversionPrescalerAddr=1073983496
virtual_ADC0_TotalConversionPrescalerReg=ADC0_CFG1

 DEPRECATED GLOBAL SYMBOLS (alphabet order)
-------------------------------------------
ADC0AsynchroClockAddr=null
ADC0AsynchroClockReg=null
ADC0BusClockAddr=null
ADC0BusClockReg=null
ADC0ClkSelAddr=null
ADC0ClkSelReg=null
ActiveConfigIdentifier=null
ActiveConfiguration=null
CPUDB_BUS_FREQ_HZ_MAX=null
CPUDB_CPU_MASTER=null
CPUDB_CW_MCU_ID=null
CPUDB_CW_MCU_NAME=null
CPUDB_LQFP32=null
CPUDB_MKL05Z32xxx4=null
CPUDB_MKL05Z4=null
CPUDB_PACKAGE=null
CPUDB_PLL_INPUT_FREQ_HZ_MAX=null
CPUDB_PLL_INPUT_FREQ_HZ_MIN=null
CPUDB_PLL_OUTPUT_FREQ_HZ_MAX=null
CPUDB_PLL_OUTPUT_FREQ_HZ_MIN=null
CPUDB_ProgramFlashBlockCount=null
CPUDB_ProgramFlashEraseUnitSize=null
CPUDB_ProgramFlashSize=null
CPUDB_ProgramFlashWriteUnitSize=null
CPUDB_SYSTEM_FREQ_HZ_MAX=null
CPU_DB_version=null
CPUendian=null
CPUfamily=null
CPUproducer=null
CPUrunSpeedModeNum=null
CPUsubFamily=null
CPUtype=null
CPUvariant=null
ClientDir_Binary=null
ClientDir_Code=null
ClientDir_PE=null
ClientDir_Project=null
CommentBrackets=null
Compiler=null
CompilerID=null
DirRel_Binary=null
DirRel_BinaryToEvents=null
DirRel_Code=null
DirRel_Docs=null
DirRel_EventToBinary=null
DirRel_Events=null
DirRel_ProjectSettings=null
DirRel_StaticCode=null
EclipseProjectName=null
InterruptTableType=null
Language=null
Not_for_MPC512x=null
OnChipEEPROM=null
OnChipFLASH=null
OnChipRAM=null
PE_CFG_PEX_DRV=null
PE_DEVELOPMENT=null
PE_ECLIPSE=null
PE_GENERATING=null
PE_G_CPUCFG_AutoIncludeIO_Map=null
PE_G_CPUCFG_EntryPointFunctionName=null
PE_G_CPUCFG_EntryPointFunctionReturn=null
PE_G_CPUCFG_EntryPointFunctionReturnType=null
PE_G_CPUCFG_GenerateLinkerFile=null
PE_G_CPUCFG_GenerateMainModule=null
PE_G_CPUCFG_InitIntVectorTableSym=null
PE_G_CPUCFG_ManageInterruptVectorTable=null
PE_G_CPU_Doxygen_RegInitValue_And_Mask_GPIOB_PDDR=null
PE_G_CPU_Doxygen_RegInitValue_And_Mask_GPIOB_PDOR=null
PE_G_CPU_Doxygen_RegInitValue_And_Mask_LPTMR0_CMR=null
PE_G_CPU_Doxygen_RegInitValue_And_Mask_LPTMR0_CSR=null
PE_G_CPU_Doxygen_RegInitValue_And_Mask_LPTMR0_PSR=null
PE_G_CPU_Doxygen_RegInitValue_And_Mask_NVIC_IPR7=null
PE_G_CPU_Doxygen_RegInitValue_And_Mask_NVIC_ISER=null
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTB_PCR0=null
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTB_PCR1=null
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTB_PCR10=null
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTB_PCR2=null
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTB_PCR3=null
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTB_PCR4=null
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTB_PCR5=null
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTB_PCR6=null
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTB_PCR7=null
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTB_PCR8=null
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTB_PCR9=null
PE_G_CPU_Doxygen_RegInitValue_And_Mask_SIM_SCGC5=null
PE_G_CPU_Doxygen_RegInitValue_And_Mask_SYST_CSR=null
PE_G_CPU_Doxygen_RegInitValue_And_Mask_SYST_CVR=null
PE_G_CPU_Doxygen_RegInitValue_And_Mask_SYST_RVR=null
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_GPIOB_PDDR=null
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_GPIOB_PDOR=null
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_LPTMR0_CMR=null
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_LPTMR0_CSR=null
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_LPTMR0_PSR=null
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_NVIC_IPR7=null
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_NVIC_ISER=null
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTB_PCR0=null
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTB_PCR1=null
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTB_PCR10=null
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTB_PCR2=null
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTB_PCR3=null
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTB_PCR4=null
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTB_PCR5=null
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTB_PCR6=null
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTB_PCR7=null
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTB_PCR8=null
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTB_PCR9=null
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_SIM_SCGC5=null
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_SYST_CSR=null
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_SYST_CVR=null
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_SYST_RVR=null
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set0_PORTB_PCR0=null
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set0_PORTB_PCR1=null
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set0_PORTB_PCR10=null
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set0_PORTB_PCR2=null
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set0_PORTB_PCR3=null
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set0_PORTB_PCR4=null
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set0_PORTB_PCR5=null
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set0_PORTB_PCR6=null
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set0_PORTB_PCR7=null
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set0_PORTB_PCR8=null
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set0_PORTB_PCR9=null
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set1_PORTB_PCR0=null
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set1_PORTB_PCR1=null
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set1_PORTB_PCR10=null
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set1_PORTB_PCR2=null
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set1_PORTB_PCR3=null
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set1_PORTB_PCR4=null
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set1_PORTB_PCR5=null
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set1_PORTB_PCR6=null
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set1_PORTB_PCR7=null
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set1_PORTB_PCR8=null
PE_G_CRI_BitsIO_LDD_INIT_Bits1_set1_PORTB_PCR9=null
PE_G_CRI_CPUINIT_set0_SCB_SHPR3=null
PE_G_CRI_CPUINIT_set1_SCB_SHPR3=null
PE_G_Doxygen_Support=null
PE_G_EBGN_SysTickBeanName=null
PE_G_GenBitMask=null
PE_G_IOMapRegBitGrpPrefix=null
PE_G_IOMapRegBitGrpPrefix_ADC0_CFG1=null
PE_G_IOMapRegBitGrpPrefix_ADC0_CFG2=null
PE_G_IOMapRegBitGrpPrefix_ADC0_CLP0=null
PE_G_IOMapRegBitGrpPrefix_ADC0_CLP1=null
PE_G_IOMapRegBitGrpPrefix_ADC0_CLP2=null
PE_G_IOMapRegBitGrpPrefix_ADC0_CLP3=null
PE_G_IOMapRegBitGrpPrefix_ADC0_CLP4=null
PE_G_IOMapRegBitGrpPrefix_ADC0_CLPD=null
PE_G_IOMapRegBitGrpPrefix_ADC0_CLPS=null
PE_G_IOMapRegBitGrpPrefix_ADC0_CV1=null
PE_G_IOMapRegBitGrpPrefix_ADC0_CV2=null
PE_G_IOMapRegBitGrpPrefix_ADC0_OFS=null
PE_G_IOMapRegBitGrpPrefix_ADC0_PG=null
PE_G_IOMapRegBitGrpPrefix_ADC0_RA=null
PE_G_IOMapRegBitGrpPrefix_ADC0_RB=null
PE_G_IOMapRegBitGrpPrefix_ADC0_SC1A=null
PE_G_IOMapRegBitGrpPrefix_ADC0_SC1B=null
PE_G_IOMapRegBitGrpPrefix_ADC0_SC2=null
PE_G_IOMapRegBitGrpPrefix_ADC0_SC3=null
PE_G_IOMapRegBitGrpPrefix_BP_COMP0=null
PE_G_IOMapRegBitGrpPrefix_BP_COMP1=null
PE_G_IOMapRegBitGrpPrefix_CMP0_CR0=null
PE_G_IOMapRegBitGrpPrefix_CMP0_CR1=null
PE_G_IOMapRegBitGrpPrefix_CMP0_DACCR=null
PE_G_IOMapRegBitGrpPrefix_CMP0_FPR=null
PE_G_IOMapRegBitGrpPrefix_CMP0_MUXCR=null
PE_G_IOMapRegBitGrpPrefix_CMP0_SCR=null
PE_G_IOMapRegBitGrpPrefix_DAC0_C0=null
PE_G_IOMapRegBitGrpPrefix_DAC0_C1=null
PE_G_IOMapRegBitGrpPrefix_DAC0_C2=null
PE_G_IOMapRegBitGrpPrefix_DAC0_DAT0H=null
PE_G_IOMapRegBitGrpPrefix_DAC0_DAT0L=null
PE_G_IOMapRegBitGrpPrefix_DAC0_DAT1H=null
PE_G_IOMapRegBitGrpPrefix_DAC0_DAT1L=null
PE_G_IOMapRegBitGrpPrefix_DAC0_SR=null
PE_G_IOMapRegBitGrpPrefix_DCRDR=null
PE_G_IOMapRegBitGrpPrefix_DCRSR=null
PE_G_IOMapRegBitGrpPrefix_DEMCR=null
PE_G_IOMapRegBitGrpPrefix_DHCSR_Read=null
PE_G_IOMapRegBitGrpPrefix_DHCSR_Write=null
PE_G_IOMapRegBitGrpPrefix_DMAMUX0_CHCFG0=null
PE_G_IOMapRegBitGrpPrefix_DMAMUX0_CHCFG1=null
PE_G_IOMapRegBitGrpPrefix_DMAMUX0_CHCFG2=null
PE_G_IOMapRegBitGrpPrefix_DMAMUX0_CHCFG3=null
PE_G_IOMapRegBitGrpPrefix_DMA_DAR0=null
PE_G_IOMapRegBitGrpPrefix_DMA_DAR1=null
PE_G_IOMapRegBitGrpPrefix_DMA_DAR2=null
PE_G_IOMapRegBitGrpPrefix_DMA_DAR3=null
PE_G_IOMapRegBitGrpPrefix_DMA_DCR0=null
PE_G_IOMapRegBitGrpPrefix_DMA_DCR1=null
PE_G_IOMapRegBitGrpPrefix_DMA_DCR2=null
PE_G_IOMapRegBitGrpPrefix_DMA_DCR3=null
PE_G_IOMapRegBitGrpPrefix_DMA_DSR0=null
PE_G_IOMapRegBitGrpPrefix_DMA_DSR1=null
PE_G_IOMapRegBitGrpPrefix_DMA_DSR2=null
PE_G_IOMapRegBitGrpPrefix_DMA_DSR3=null
PE_G_IOMapRegBitGrpPrefix_DMA_DSR_BCR0=null
PE_G_IOMapRegBitGrpPrefix_DMA_DSR_BCR1=null
PE_G_IOMapRegBitGrpPrefix_DMA_DSR_BCR2=null
PE_G_IOMapRegBitGrpPrefix_DMA_DSR_BCR3=null
PE_G_IOMapRegBitGrpPrefix_DMA_SAR0=null
PE_G_IOMapRegBitGrpPrefix_DMA_SAR1=null
PE_G_IOMapRegBitGrpPrefix_DMA_SAR2=null
PE_G_IOMapRegBitGrpPrefix_DMA_SAR3=null
PE_G_IOMapRegBitGrpPrefix_DWT_COMP0=null
PE_G_IOMapRegBitGrpPrefix_DWT_COMP1=null
PE_G_IOMapRegBitGrpPrefix_DWT_FUNCTION0=null
PE_G_IOMapRegBitGrpPrefix_DWT_FUNCTION1=null
PE_G_IOMapRegBitGrpPrefix_DWT_MASK0=null
PE_G_IOMapRegBitGrpPrefix_DWT_MASK1=null
PE_G_IOMapRegBitGrpPrefix_FGPIOA_PCOR=null
PE_G_IOMapRegBitGrpPrefix_FGPIOA_PDDR=null
PE_G_IOMapRegBitGrpPrefix_FGPIOA_PDIR=null
PE_G_IOMapRegBitGrpPrefix_FGPIOA_PDOR=null
PE_G_IOMapRegBitGrpPrefix_FGPIOA_PSOR=null
PE_G_IOMapRegBitGrpPrefix_FGPIOA_PTOR=null
PE_G_IOMapRegBitGrpPrefix_FGPIOB_PCOR=null
PE_G_IOMapRegBitGrpPrefix_FGPIOB_PDDR=null
PE_G_IOMapRegBitGrpPrefix_FGPIOB_PDIR=null
PE_G_IOMapRegBitGrpPrefix_FGPIOB_PDOR=null
PE_G_IOMapRegBitGrpPrefix_FGPIOB_PSOR=null
PE_G_IOMapRegBitGrpPrefix_FGPIOB_PTOR=null
PE_G_IOMapRegBitGrpPrefix_GPIOA_PCOR=null
PE_G_IOMapRegBitGrpPrefix_GPIOA_PDDR=null
PE_G_IOMapRegBitGrpPrefix_GPIOA_PDIR=null
PE_G_IOMapRegBitGrpPrefix_GPIOA_PDOR=null
PE_G_IOMapRegBitGrpPrefix_GPIOA_PSOR=null
PE_G_IOMapRegBitGrpPrefix_GPIOA_PTOR=null
PE_G_IOMapRegBitGrpPrefix_GPIOB_PCOR=null
PE_G_IOMapRegBitGrpPrefix_GPIOB_PDDR=null
PE_G_IOMapRegBitGrpPrefix_GPIOB_PDIR=null
PE_G_IOMapRegBitGrpPrefix_GPIOB_PDOR=null
PE_G_IOMapRegBitGrpPrefix_GPIOB_PSOR=null
PE_G_IOMapRegBitGrpPrefix_GPIOB_PTOR=null
PE_G_IOMapRegBitGrpPrefix_I2C0_A1=null
PE_G_IOMapRegBitGrpPrefix_I2C0_A2=null
PE_G_IOMapRegBitGrpPrefix_I2C0_C1=null
PE_G_IOMapRegBitGrpPrefix_I2C0_C2=null
PE_G_IOMapRegBitGrpPrefix_I2C0_D=null
PE_G_IOMapRegBitGrpPrefix_I2C0_F=null
PE_G_IOMapRegBitGrpPrefix_I2C0_FLT=null
PE_G_IOMapRegBitGrpPrefix_I2C0_RA=null
PE_G_IOMapRegBitGrpPrefix_I2C0_S=null
PE_G_IOMapRegBitGrpPrefix_I2C0_SLTH=null
PE_G_IOMapRegBitGrpPrefix_I2C0_SLTL=null
PE_G_IOMapRegBitGrpPrefix_I2C0_SMB=null
PE_G_IOMapRegBitGrpPrefix_LPTMR0_CMR=null
PE_G_IOMapRegBitGrpPrefix_LPTMR0_CNR=null
PE_G_IOMapRegBitGrpPrefix_LPTMR0_CSR=null
PE_G_IOMapRegBitGrpPrefix_LPTMR0_PSR=null
PE_G_IOMapRegBitGrpPrefix_MTBDWT_COMP0=null
PE_G_IOMapRegBitGrpPrefix_MTBDWT_COMP1=null
PE_G_IOMapRegBitGrpPrefix_MTBDWT_COMPID0=null
PE_G_IOMapRegBitGrpPrefix_MTBDWT_COMPID1=null
PE_G_IOMapRegBitGrpPrefix_MTBDWT_COMPID2=null
PE_G_IOMapRegBitGrpPrefix_MTBDWT_COMPID3=null
PE_G_IOMapRegBitGrpPrefix_MTBDWT_FCT0=null
PE_G_IOMapRegBitGrpPrefix_MTBDWT_FCT1=null
PE_G_IOMapRegBitGrpPrefix_MTBDWT_MASK0=null
PE_G_IOMapRegBitGrpPrefix_MTBDWT_MASK1=null
PE_G_IOMapRegBitGrpPrefix_MTBDWT_PERIPHID0=null
PE_G_IOMapRegBitGrpPrefix_MTBDWT_PERIPHID1=null
PE_G_IOMapRegBitGrpPrefix_MTBDWT_PERIPHID2=null
PE_G_IOMapRegBitGrpPrefix_MTBDWT_PERIPHID3=null
PE_G_IOMapRegBitGrpPrefix_MTBDWT_PERIPHID4=null
PE_G_IOMapRegBitGrpPrefix_MTBDWT_PERIPHID5=null
PE_G_IOMapRegBitGrpPrefix_MTBDWT_PERIPHID6=null
PE_G_IOMapRegBitGrpPrefix_MTBDWT_PERIPHID7=null
PE_G_IOMapRegBitGrpPrefix_MTB_COMPID0=null
PE_G_IOMapRegBitGrpPrefix_MTB_COMPID1=null
PE_G_IOMapRegBitGrpPrefix_MTB_COMPID2=null
PE_G_IOMapRegBitGrpPrefix_MTB_COMPID3=null
PE_G_IOMapRegBitGrpPrefix_MTB_PERIPHID0=null
PE_G_IOMapRegBitGrpPrefix_MTB_PERIPHID1=null
PE_G_IOMapRegBitGrpPrefix_MTB_PERIPHID2=null
PE_G_IOMapRegBitGrpPrefix_MTB_PERIPHID3=null
PE_G_IOMapRegBitGrpPrefix_MTB_PERIPHID4=null
PE_G_IOMapRegBitGrpPrefix_MTB_PERIPHID5=null
PE_G_IOMapRegBitGrpPrefix_MTB_PERIPHID6=null
PE_G_IOMapRegBitGrpPrefix_MTB_PERIPHID7=null
PE_G_IOMapRegBitGrpPrefix_NVIC_IPR0=null
PE_G_IOMapRegBitGrpPrefix_NVIC_IPR1=null
PE_G_IOMapRegBitGrpPrefix_NVIC_IPR2=null
PE_G_IOMapRegBitGrpPrefix_NVIC_IPR3=null
PE_G_IOMapRegBitGrpPrefix_NVIC_IPR4=null
PE_G_IOMapRegBitGrpPrefix_NVIC_IPR5=null
PE_G_IOMapRegBitGrpPrefix_NVIC_IPR6=null
PE_G_IOMapRegBitGrpPrefix_NVIC_IPR7=null
PE_G_IOMapRegBitGrpPrefix_OSC0_CR=null
PE_G_IOMapRegBitGrpPrefix_PIT_CVAL0=null
PE_G_IOMapRegBitGrpPrefix_PIT_CVAL1=null
PE_G_IOMapRegBitGrpPrefix_PIT_LDVAL0=null
PE_G_IOMapRegBitGrpPrefix_PIT_LDVAL1=null
PE_G_IOMapRegBitGrpPrefix_PIT_TCTRL0=null
PE_G_IOMapRegBitGrpPrefix_PIT_TCTRL1=null
PE_G_IOMapRegBitGrpPrefix_PIT_TFLG0=null
PE_G_IOMapRegBitGrpPrefix_PIT_TFLG1=null
PE_G_IOMapRegBitGrpPrefix_PORTA_GPCHR=null
PE_G_IOMapRegBitGrpPrefix_PORTA_GPCLR=null
PE_G_IOMapRegBitGrpPrefix_PORTA_ISFR=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR0=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR1=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR10=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR11=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR12=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR13=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR14=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR15=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR16=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR17=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR18=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR19=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR2=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR20=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR21=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR22=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR23=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR24=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR25=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR26=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR27=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR28=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR29=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR3=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR30=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR31=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR4=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR5=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR6=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR7=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR8=null
PE_G_IOMapRegBitGrpPrefix_PORTA_PCR9=null
PE_G_IOMapRegBitGrpPrefix_PORTB_GPCHR=null
PE_G_IOMapRegBitGrpPrefix_PORTB_GPCLR=null
PE_G_IOMapRegBitGrpPrefix_PORTB_ISFR=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR0=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR1=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR10=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR11=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR12=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR13=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR14=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR15=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR16=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR17=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR18=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR19=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR2=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR20=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR21=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR22=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR23=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR24=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR25=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR26=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR27=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR28=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR29=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR3=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR30=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR31=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR4=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR5=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR6=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR7=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR8=null
PE_G_IOMapRegBitGrpPrefix_PORTB_PCR9=null
PE_G_IOMapRegBitGrpPrefix_ROM_COMPID0=null
PE_G_IOMapRegBitGrpPrefix_ROM_COMPID1=null
PE_G_IOMapRegBitGrpPrefix_ROM_COMPID2=null
PE_G_IOMapRegBitGrpPrefix_ROM_COMPID3=null
PE_G_IOMapRegBitGrpPrefix_ROM_ENTRY0=null
PE_G_IOMapRegBitGrpPrefix_ROM_ENTRY1=null
PE_G_IOMapRegBitGrpPrefix_ROM_ENTRY2=null
PE_G_IOMapRegBitGrpPrefix_SPI0_BR=null
PE_G_IOMapRegBitGrpPrefix_SPI0_C1=null
PE_G_IOMapRegBitGrpPrefix_SPI0_C2=null
PE_G_IOMapRegBitGrpPrefix_SPI0_D=null
PE_G_IOMapRegBitGrpPrefix_SPI0_M=null
PE_G_IOMapRegBitGrpPrefix_SPI0_S=null
PE_G_IOMapRegBitGrpPrefix_SYST_CALIB=null
PE_G_IOMapRegBitGrpPrefix_SYST_CSR=null
PE_G_IOMapRegBitGrpPrefix_SYST_CVR=null
PE_G_IOMapRegBitGrpPrefix_SYST_RVR=null
PE_G_IOMapRegBitGrpPrefix_TPM0_C0SC=null
PE_G_IOMapRegBitGrpPrefix_TPM0_C0V=null
PE_G_IOMapRegBitGrpPrefix_TPM0_C1SC=null
PE_G_IOMapRegBitGrpPrefix_TPM0_C1V=null
PE_G_IOMapRegBitGrpPrefix_TPM0_C2SC=null
PE_G_IOMapRegBitGrpPrefix_TPM0_C2V=null
PE_G_IOMapRegBitGrpPrefix_TPM0_C3SC=null
PE_G_IOMapRegBitGrpPrefix_TPM0_C3V=null
PE_G_IOMapRegBitGrpPrefix_TPM0_C4SC=null
PE_G_IOMapRegBitGrpPrefix_TPM0_C4V=null
PE_G_IOMapRegBitGrpPrefix_TPM0_C5SC=null
PE_G_IOMapRegBitGrpPrefix_TPM0_C5V=null
PE_G_IOMapRegBitGrpPrefix_TPM0_CNT=null
PE_G_IOMapRegBitGrpPrefix_TPM0_CONF=null
PE_G_IOMapRegBitGrpPrefix_TPM0_MOD=null
PE_G_IOMapRegBitGrpPrefix_TPM0_SC=null
PE_G_IOMapRegBitGrpPrefix_TPM0_STATUS=null
PE_G_IOMapRegBitGrpPrefix_TPM1_C0SC=null
PE_G_IOMapRegBitGrpPrefix_TPM1_C0V=null
PE_G_IOMapRegBitGrpPrefix_TPM1_C1SC=null
PE_G_IOMapRegBitGrpPrefix_TPM1_C1V=null
PE_G_IOMapRegBitGrpPrefix_TPM1_CNT=null
PE_G_IOMapRegBitGrpPrefix_TPM1_CONF=null
PE_G_IOMapRegBitGrpPrefix_TPM1_MOD=null
PE_G_IOMapRegBitGrpPrefix_TPM1_SC=null
PE_G_IOMapRegBitGrpPrefix_TPM1_STATUS=null
PE_G_IOMapRegBitGrpPrefix_TSI0_DATA=null
PE_G_IOMapRegBitGrpPrefix_TSI0_GENCS=null
PE_G_IOMapRegBitGrpPrefix_TSI0_TSHD=null
PE_G_MisraCnfBackParams_0=null
PE_G_MisraCnfParams_0=null
PE_G_MisraRuleList_0=null
PE_G_MisraStackIdx=null
PE_G_NO_SETREGMACROS=null
PE_G_RTOSAdap_regCompIndex=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodEnabled_ClrBit=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodEnabled_GetBit=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodEnabled_GetVal=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodEnabled_Init=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodEnabled_NegBit=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodEnabled_PutBit=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodEnabled_PutVal=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodEnabled_SetBit=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_ClrBit=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_ConnectPin=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_Deinit=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_GetBit=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_GetDir=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_GetRawBit=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_GetRawVal=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_GetVal=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_Init=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_NegBit=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_PutBit=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_PutVal=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_SetBit=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_SetDir=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_SetInput=null
PE_G_RTOSAdap_regCompInstance_Bits1_methodPtr_SetOutput=null
PE_G_RTOSAdap_regCompInstance_TI1_eventEnabled_OnInterrupt=null
PE_G_RTOSAdap_regCompInstance_TI1_eventPtr_OnInterrupt=null
PE_G_RTOSAdap_regCompInstance_TI1_methodEnabled_Disable=null
PE_G_RTOSAdap_regCompInstance_TI1_methodEnabled_Enable=null
PE_G_RTOSAdap_regCompInstance_TI1_methodEnabled_Init=null
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_Deinit=null
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_Disable=null
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_Enable=null
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_GetDriverState=null
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_GetEventMask=null
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_GetEventStatus=null
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_Init=null
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_SelectPeriod=null
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_SetEventMask=null
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_SetFrequencyHz=null
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_SetFrequencyMHz=null
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_SetFrequencykHz=null
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_SetOperationMode=null
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_SetPeriodMS=null
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_SetPeriodReal=null
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_SetPeriodSec=null
PE_G_RTOSAdap_regCompInstance_TI1_methodPtr_SetPeriodUS=null
PE_G_RTOSAdap_regCompInstance_TU1_eventEnabled_OnCounterRestart=null
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel0=null
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel1=null
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel2=null
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel3=null
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel4=null
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel5=null
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel6=null
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel7=null
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnCounterRestart=null
PE_G_RTOSAdap_regCompInstance_TU1_methodEnabled_Disable=null
PE_G_RTOSAdap_regCompInstance_TU1_methodEnabled_Enable=null
PE_G_RTOSAdap_regCompInstance_TU1_methodEnabled_Init=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_ConnectPin=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_Deinit=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_Disable=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_Enable=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetCaptureValue=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetCounterValue=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetDriverState=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetEventMask=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetEventStatus=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetInputFrequency=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetInputFrequencyReal=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetOffsetTicks=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetPeriodTicks=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_Init=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_ResetCounter=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SelectCaptureEdge=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SelectInputFrequency=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SelectOutputAction=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SetEventMask=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SetOffsetTicks=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SetOperationMode=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SetPeriodTicks=null
PE_G_USE_UINTXX_T=null
PE_ProductVersion=null
PEversion=null
PEversionDecimal=null
ProcessorModule=null
ProcessorName=null
ProjectModule=null
ProjectName=null
ProjectStaticFilesGenerationMode=null
ServerDir_PE=null
SetHighSpeedMode=null
SupportedCPUfamily=null
TimeStamp=null
Xtal_kHz=null
Xtal_kHz_real=null
ivINT_LPTimer=null
virtual_ADC0_TotalConversionPrescalerAddr=null
virtual_ADC0_TotalConversionPrescalerReg=null

 GLOBAL LISTS (alphabet order)
-------------------------------------------
ADC0AsynchroClock=[1]
ADC0AsynchroClock_Setting=[ADC0Async_FullPower_HighSpeed]
ADC0BusClock=[1]
ADC0BusClock_Setting=[1]
ADC0ClkSel=[1]
ADC0ClkSel_Setting=[ADC0BusClock]
COPClkSelect=[1]
COPClkSelect_Setting=[COPBusClock]
ERCLK32KSel=[1]
ERCLK32KSel_Setting=[LPO_1kHzSrc]
EventModuleList=[Events]
I2C0_LoTimeoutClkSel=[1]
I2C0_LoTimeoutClkSel_Setting=[I2C0_LoTimeout_BusClkDiv64]
IRCLKSel=[1]
IRCLKSel_Setting=[IRC_32kHz]
IncludeSharedModules=[PE_Types|PE_Error|PE_Const|IO_Map]
InstructionClock=[undef]
LPTMR0_ClockSelect=[1]
LPTMR0_ClockSelect_Setting=[IRCLK]
MCGOUTSel=[1]
MCGOUTSel_Setting=[MCGFLLCLK]
MCG_FLL_MFactor=[640]
MCG_FLL_MFactor_Setting=[640]
MCG_FLL_RCLKSel=[1]
MCG_FLL_RCLKSel_Setting=[IRC_32kHz]
MCG_FRDIV=[1]
MCG_FRDIV_Setting=[1]
ModuleList=[Bits1|WAIT1|SysTick|TI1|TU1]
OUTDIV1Presc=[1]
OUTDIV1Presc_Setting=[1]
OUTDIV4Presc=[1]
OUTDIV4Presc_Setting=[1]
PE_G_CPU_DoxyGenModules=[Bits1|SysTick|TU1|TI1]
PE_G_CPU_Doxygen_RegsTouchedByPeriph_LPTMR0=[SIM_SCGC5|LPTMR0_CSR|LPTMR0_CMR|LPTMR0_PSR|NVIC_IPR7|NVIC_ISER]
PE_G_CPU_Doxygen_RegsTouchedByPeriph_PTB=[GPIOB_PDDR|GPIOB_PDOR|PORTB_PCR0|PORTB_PCR1|PORTB_PCR2|PORTB_PCR3|PORTB_PCR4|PORTB_PCR5|PORTB_PCR6|PORTB_PCR7|PORTB_PCR8|PORTB_PCR9|PORTB_PCR10]
PE_G_CPU_Doxygen_RegsTouchedByPeriph_SysTick=[SYST_CSR|SYST_RVR|SYST_CVR]
PE_G_CRI_BitsIO_LDD_INIT_Bits1_RegList32=[PORTB_PCR0|PORTB_PCR1|PORTB_PCR2|PORTB_PCR3|PORTB_PCR4|PORTB_PCR5|PORTB_PCR6|PORTB_PCR7|PORTB_PCR8|PORTB_PCR9|PORTB_PCR10]
PE_G_CRI_BitsIO_LDD_INIT_Bits1_inited=[PORTB_PCR0|PORTB_PCR1|PORTB_PCR2|PORTB_PCR3|PORTB_PCR4|PORTB_PCR5|PORTB_PCR6|PORTB_PCR7|PORTB_PCR8|PORTB_PCR9|PORTB_PCR10]
PE_G_CRI_CPUINIT_RegList32=[SCB_SHPR3]
PE_G_RTOSAdap_regCompInstanceAllocatedDevices=[PTB|LPTMR0|LPTMR0]
PE_G_RTOSAdap_regCompInstanceDeviceBaseAddrs=[1074786368|1074003968|1074003968]
PE_G_RTOSAdap_regCompInstanceIds=[0|1|2]
PE_G_RTOSAdap_regCompInstanceNames=[Bits1|TU1|TI1]
PE_G_RTOSAdap_regCompInstanceSharedComponentName=[Bits1|TU1|TI1]
PE_G_RTOSAdap_regCompInstanceTypes=[BitsIO_LDD|TimerUnit_LDD|TimerInt_LDD]
PE_G_RTOSAdap_regCompInstance_Bits1_methods=[Init|Deinit|GetDir|SetDir|SetInput|SetOutput|GetVal|PutVal|GetBit|PutBit|SetBit|ClrBit|NegBit|ConnectPin|GetRawVal|GetRawBit]
PE_G_RTOSAdap_regCompInstance_TI1_events=[OnInterrupt]
PE_G_RTOSAdap_regCompInstance_TI1_methods=[Init|Deinit|Enable|Disable|SetEventMask|GetEventMask|GetEventStatus|SelectPeriod|SetPeriodUS|SetPeriodMS|SetPeriodSec|SetPeriodReal|SetFrequencyHz|SetFrequencykHz|SetFrequencyMHz|SetOperationMode|GetDriverState]
PE_G_RTOSAdap_regCompInstance_TU1_events=[OnCounterRestart|OnChannel0|OnChannel1|OnChannel2|OnChannel3|OnChannel4|OnChannel5|OnChannel6|OnChannel7]
PE_G_RTOSAdap_regCompInstance_TU1_methods=[Init|Deinit|Enable|Disable|SetEventMask|GetEventMask|GetEventStatus|SelectInputFrequency|GetInputFrequencyReal|GetInputFrequency|SetPeriodTicks|GetPeriodTicks|ResetCounter|GetCounterValue|SetOffsetTicks|GetOffsetTicks|GetCaptureValue|SelectOutputAction|SelectCaptureEdge|ConnectPin|SetOperationMode|GetDriverState]
PE_G_TU_TU1_LinkedBy=[TI1]
PE_G_TU_TU1_LinkedChannel=[LPTMR0_CMR]
PE_G_TU_TU1_Sharing=[true]
PE_G_TU_TU1_TmgCounterInitPrescaler=[128]
PE_G_TU_TU1_Tmg_PeriodInitPeriod_real=[0.05859375]
SPI0_BaudRatePrescDiv=[1]
SPI0_BaudRatePrescDiv_Setting=[1]
SharedModules=[Kinetis\PE_Types.drv|Kinetis\PE_Error.drv|Kinetis\PE_Const.drv|Kinetis\IO_Map.drv]
SpeedModeList=[SpeedMode0]
SpeedModeNames=[SpeedMode0|SpeedMode1|SpeedMode2|SpeedMode3|SpeedMode4|SpeedMode5|SpeedMode6|SpeedMode7]
SystemPrescaler=[1]
SystemPrescaler_Setting=[1]
TPMClk=[1]
TPMClk_Setting=[MCGFLLCLK]
UART0_ClkSel=[1]
UART0_ClkSel_Setting=[IRCLK]
UART0_Divider=[4]
UART0_Divider_Setting=[4]
virtual_ADC0_TotalConversionPrescaler=[1]
virtual_ADC0_TotalConversionPrescaler_Setting=[1]

{{DEVELOPMENT}} --------(((DEBUGINFO)))--------.{{DEVELOPMENT}} 


#endif /* __PE_Types_H */
